{
  "hash": "20be4c5b822ad1853e188ba114e32968",
  "result": {
    "engine": "julia",
    "markdown": "---\ntitle: Problem Set 4\nnumber-sections: true\nengine: julia\n---\n\n## Barycentric coordinates\n\n> [1] We discussed barycentric coordinates in Lecture 08, pp. 11-12, and they are covered in Ch. 14 (Chanteur) in the ISSI book pp. 350-351. They are defined based on equation: $\\left(\\sum_{α=1}^4 μ_α\\right) \\mathbf{r}=\\sum_{α=1}^4\\left(μ_α \\mathbf{r}_α\\right)$ with the constraint $\\sum_{α=1}^4 μ_α=1$. We said that this physically means $μ_α(\\mathbf{r})=1+\\mathbf{k}_α \\cdot\\left(\\mathbf{r}-\\mathbf{r}_α\\right)$, a linear decrease of the weight with increasing distance from the vertex $r_α$ of the tetrahedron, scaled according to the reciprocal vector (the inverted distance of vertex to plane across it).\n\n> Prove that $μ_α(\\mathbf{r})=1+\\mathbf{k}_α \\cdot\\left(\\mathbf{r}-\\mathbf{r}_α\\right)$ by using the inverse transformation: $\\mathbf{μ}=\\mathbf{T}^{-1}\\left(\\mathbf{r}-\\mathbf{r}_4\\right)$.\n\nIn barycentric coordinates we have\n$$\n\\mathbf{r}-\\mathbf{r}_4\n    = \\sum_{α=1}^4(μ_α \\mathbf{r}_α) -  (\\sum_{α=1}^4 μ_α) \\mathbf{r}_4\n    = μ_1 \\mathbf{d}_1 + μ_2 \\mathbf{d}_2 + μ_3\\mathbf{d}_3.\n$$\n\nA geometric way to see the first row of $T^{-1}$ is to note that\n\n$$\n\\mathbf{k}_1 = \\frac{\\mathbf{d}_2\\times\\mathbf{d}_3} {\\mathbf{d}_1\\cdot(\\mathbf{d}_2\\times\\mathbf{d}_3)}\n$$\n\nis the unique “reciprocal vector” satisfying $\\mathbf{k}_1\\cdot\\mathbf{d}_1=1$ and $\\mathbf{k}_1\\cdot\\mathbf{d}_2= \\mathbf{k}_1\\cdot\\mathbf{d}_3=0$ .\n\nso\n\n$$\nT^{-1} = \\left(\\begin{array}{l}\n\\mathbf{k}_1 \\\\\n\\mathbf{k}_2 \\\\\n\\mathbf{k}_3\n\\end{array}\\right)\n$$\n\nwith $\\mathbf{k}_2,\\mathbf{k}_3$ defined similarly by the appropriate cross products and normalization.\n\nTherefore from $\\mathbf{μ}=\\mathbf{T}^{-1}\\left(\\mathbf{r}-\\mathbf{r}_4\\right)$, we have $μ_i = \\mathbf{k}_i\\cdot(\\mathbf{r}-\\mathbf{r}_{4})$, where $i=1,2,3$.\n\nNotice that $\\mathbf{r}-\\mathbf{r}_{4} = (\\mathbf{r}-\\mathbf{r}_1) + \\underbrace{(\\mathbf{r}_1-\\mathbf{r}_{4})}_{=\\mathbf{d}_1}$ and by construction $\\mathbf{k}_1\\cdot\\mathbf{d}_1=1$.\n\nTherefore\n\n$$\nμ_1 = \\mathbf{k}_1 \\cdot(\\mathbf{r}-\\mathbf{r}_1) + \\mathbf{k}_1 \\cdot\\mathbf{d}_1\n    = 1 + \\mathbf{k}_1 \\cdot(\\mathbf{r}-\\mathbf{r}_1)\n$$\n\nBy identical reasoning, $μ_α = 1 + \\mathbf{k}_α \\cdot (\\mathbf{r}-\\mathbf{r}_α)$.\n\n## Cluster magnetopause crossing\n\n> [2] For a CLUSTER magnetopause crossing on 2001/06/11 other than the one in the crib...\n> - compute Qsr, Elongation, Planarity and then the magnetopause normal and velocity. \n> - Compute the current density, and field curvature at that location. \n> - Compute the magnetopause thickness. \n> - Compare with table below from Keyser et al. (original from Dunlop and Balogh, 2004).\n> - Create and discuss plots of data, satellite positions, table of results from the “simple” and from either the “symmetric” or the “relative timing” methods. See next page for details.\n\n> Details: \n> - I have released a crib sheet (Hwk04_02.pro) to help. It is not to be executed and run. Take it as a cheat-sheet: a collection of command-line steps to aid your construction of your own code. I brought over the Cluster CDFs, which you can read using IDL or Python tools or spd_gui. (The data does not exist in SPDF, I had to get it from the Cluster Active Archive. Perhaps AMDA can help you read it.). Use ChatGPT widely to help you, but review documentation when unsure.\n> - The IDL code above uses helper functions for the linear gradient estimation and timing analysis which we discussed in class, and I include in the zip file. You may rewrite them in Python if you wish or use them directly in IDL (they are very simple). They are called lingradest.pro and mptiming.pro.\n\n::: {.callout-warning}\nFunctions in this report are included in `SpaceTools` and documented in the following page: [Multi-spacecraft analysis methods](https://beforerr.github.io/SpaceTools.jl/dev/explanations/multispacecraft/). However, they are experimental, not tested, and may change without notice.\n:::\n\n### Loading the data\n\nTo load the data from CSA server, we implement a module using `HAPI` protocol. More details can be found in the [`HAPI.jl`](https://github.com/Beforerr/HAPI.jl).\n\n::: {#2 .cell execution_count=1}\n``` {.julia .cell-code}\nusing CairoMakie\nusing HAPI\nusing Dates\nusing SpaceTools\nusing DimensionalData\nusing Unitful\nusing DataFrames\nusing SummaryTables\nusing PrettyPrinting\n```\n:::\n\n\n\n::: {#4 .cell execution_count=1}\n``` {.julia .cell-code}\ntrange = timerange(\"2001-06-11T20:10:30\", \"2001-06-11T20:12:30\")\nB_vars = [\n    \"csa/C1_CP_FGM_FULL/B_vec_xyz_gse\",\n    \"csa/C2_CP_FGM_FULL/B_vec_xyz_gse\",\n    \"csa/C3_CP_FGM_FULL/B_vec_xyz_gse\",\n    \"csa/C4_CP_FGM_FULL/B_vec_xyz_gse\",\n]\npos_vars = [\n    \"csa/C1_CP_FGM_FULL/sc_pos_xyz_gse\",\n    \"csa/C2_CP_FGM_FULL/sc_pos_xyz_gse\",\n    \"csa/C3_CP_FGM_FULL/sc_pos_xyz_gse\",\n    \"csa/C4_CP_FGM_FULL/sc_pos_xyz_gse\",\n]\nB_data = get_data.(B_vars, trange)\npos_data = get_data.(pos_vars, trange) .|> DimArray\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n4-element Vector{DimVector{Vector{Quantity{Float64, 𝐋, Unitful.FreeUnits{(km,), 𝐋, nothing}}}, Tuple{Ti{DimensionalData.Dimensions.Lookups.Sampled{DateTime, SentinelArrays.ChainedVector{DateTime, Vector{DateTime}}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Irregular{Tuple{Nothing, Nothing}}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}}, Tuple{}, Vector{Vector{Quantity{Float64, 𝐋, Unitful.FreeUnits{(km,), 𝐋, nothing}}}}, Symbol, Dict{Any, Any}}}:\n Vector{Quantity{Float64, 𝐋, Unitful.FreeUnits{(km,), 𝐋, nothing}}}[[-17192.3 km, -121540.1 km, 12485.9 km], [-17192.4 km, -121540.1 km, 12485.8 km], [-17192.4 km, -121540.1 km, 12485.8 km], [-17192.4 km, -121540.1 km, 12485.7 km], [-17192.4 km, -121540.1 km, 12485.7 km], [-17192.5 km, -121540.1 km, 12485.6 km], [-17192.5 km, -121540.1 km, 12485.6 km], [-17192.5 km, -121540.2 km, 12485.6 km], [-17192.5 km, -121540.2 km, 12485.5 km], [-17192.5 km, -121540.2 km, 12485.5 km]  …  [-17244.3 km, -121549.9 km, 12366.8 km], [-17244.3 km, -121549.9 km, 12366.8 km], [-17244.3 km, -121549.9 km, 12366.7 km], [-17244.3 km, -121549.9 km, 12366.7 km], [-17244.3 km, -121549.9 km, 12366.6 km], [-17244.3 km, -121549.9 km, 12366.6 km], [-17244.4 km, -121549.9 km, 12366.5 km], [-17244.4 km, -121549.9 km, 12366.5 km], [-17244.4 km, -121549.9 km, 12366.5 km], [-17244.4 km, -121549.9 km, 12366.4 km]]\n Vector{Quantity{Float64, 𝐋, Unitful.FreeUnits{(km,), 𝐋, nothing}}}[[-19049.1 km, -122091.8 km, 13031.5 km], [-19049.1 km, -122091.8 km, 13031.5 km], [-19049.1 km, -122091.8 km, 13031.4 km], [-19049.1 km, -122091.8 km, 13031.4 km], [-19049.1 km, -122091.8 km, 13031.4 km], [-19049.2 km, -122091.8 km, 13031.3 km], [-19049.2 km, -122091.9 km, 13031.3 km], [-19049.2 km, -122091.9 km, 13031.2 km], [-19049.2 km, -122091.9 km, 13031.2 km], [-19049.3 km, -122091.9 km, 13031.1 km]  …  [-19100.2 km, -122101.3 km, 12914.8 km], [-19100.2 km, -122101.3 km, 12914.8 km], [-19100.2 km, -122101.3 km, 12914.7 km], [-19100.2 km, -122101.3 km, 12914.7 km], [-19100.2 km, -122101.3 km, 12914.6 km], [-19100.2 km, -122101.3 km, 12914.6 km], [-19100.3 km, -122101.3 km, 12914.5 km], [-19100.3 km, -122101.3 km, 12914.5 km], [-19100.3 km, -122101.3 km, 12914.4 km], [-19100.3 km, -122101.3 km, 12914.4 km]]\n Vector{Quantity{Float64, 𝐋, Unitful.FreeUnits{(km,), 𝐋, nothing}}}[[-18506.3 km, -121999.5 km, 11157.3 km], [-18506.3 km, -121999.5 km, 11157.2 km], [-18506.3 km, -121999.5 km, 11157.2 km], [-18506.3 km, -121999.5 km, 11157.2 km], [-18506.3 km, -121999.5 km, 11157.1 km], [-18506.3 km, -121999.6 km, 11157.1 km], [-18506.4 km, -121999.6 km, 11157.0 km], [-18506.4 km, -121999.6 km, 11157.0 km], [-18506.4 km, -121999.6 km, 11156.9 km], [-18506.4 km, -121999.6 km, 11156.9 km]  …  [-18558.0 km, -122012.7 km, 11040.1 km], [-18558.0 km, -122012.7 km, 11040.0 km], [-18558.0 km, -122012.7 km, 11040.0 km], [-18558.0 km, -122012.7 km, 11040.0 km], [-18558.0 km, -122012.7 km, 11039.9 km], [-18558.1 km, -122012.7 km, 11039.9 km], [-18558.1 km, -122012.7 km, 11039.8 km], [-18558.1 km, -122012.7 km, 11039.8 km], [-18558.1 km, -122012.7 km, 11039.7 km], [-18558.2 km, -122012.8 km, 11039.7 km]]\n Vector{Quantity{Float64, 𝐋, Unitful.FreeUnits{(km,), 𝐋, nothing}}}[[-17608.1 km, -123229.0 km, 12203.8 km], [-17608.1 km, -123229.0 km, 12203.8 km], [-17608.2 km, -123229.0 km, 12203.7 km], [-17608.2 km, -123229.0 km, 12203.7 km], [-17608.2 km, -123229.0 km, 12203.6 km], [-17608.2 km, -123229.0 km, 12203.6 km], [-17608.2 km, -123229.0 km, 12203.6 km], [-17608.2 km, -123229.0 km, 12203.5 km], [-17608.3 km, -123229.0 km, 12203.5 km], [-17608.3 km, -123229.0 km, 12203.4 km]  …  [-17658.1 km, -123238.3 km, 12089.2 km], [-17658.1 km, -123238.3 km, 12089.2 km], [-17658.1 km, -123238.3 km, 12089.1 km], [-17658.1 km, -123238.3 km, 12089.1 km], [-17658.2 km, -123238.3 km, 12089.0 km], [-17658.2 km, -123238.3 km, 12089.0 km], [-17658.2 km, -123238.3 km, 12089.0 km], [-17658.2 km, -123238.3 km, 12088.9 km], [-17658.2 km, -123238.3 km, 12088.9 km], [-17658.2 km, -123238.3 km, 12088.8 km]]\n```\n:::\n:::\n\n\n\n::: {#6 .cell execution_count=1}\n``` {.julia .cell-code}\n# Make start time of the field-rotation (start of By, Bz change) fiducial\nt0s = [\n    \"2001-06-11T20:11:43\",\n    \"2001-06-11T20:11:49\",\n    \"2001-06-11T20:11:55\",\n    \"2001-06-11T20:11:39\",\n] .|> DateTime\nt1s = [\n    \"2001-06-11T20:11:50\",\n    \"2001-06-11T20:12:00\",\n    \"2001-06-11T20:12:04\",\n    \"2001-06-11T20:11:56\",\n] .|> DateTime\n\navgtime = tmean(t0s)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n2001-06-11T20:11:46.500\n```\n:::\n:::\n\n\n\n::: {#8 .cell execution_count=1}\n``` {.julia .cell-code}\nfig, axs = tplot(B_data)\ntlines!.(axs, avgtime)\ntlines!.(axs, t0s)\ntlines!.(axs, t1s)\nfig\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n![](ps4_files/figure-html/cell-5-output-1.svg){}\n:::\n:::\n\n\n\n### Plot sc positions relative to mesocenter\n\n::: {#10 .cell execution_count=1}\n``` {.julia .cell-code}\nusing Statistics\n\nRs = tinterp.(pos_data, avgtime) # Rs = getindex.(pos_data, Ti=Near(avgtime))\nR00 = mean(Rs)\nR0s = Rs .- Ref(R00)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n4-element Vector{Vector{Quantity{Float64, 𝐋, Unitful.FreeUnits{(km,), 𝐋, nothing}}}}:\n [896.0960227272735 km, 675.4250000000029 km, 264.8500000000022 km]\n [-960.0835227272728 km, 123.92500000000291 km, 812.0500000000011 km]\n [-417.60852272727425 km, 213.8249999999971 km, -1062.5499999999993 km]\n [481.5960227272735 km, -1013.1750000000029 km, -14.349999999998545 km]\n```\n:::\n:::\n\n\n\n::: {#12 .cell execution_count=1}\n``` {.julia .cell-code}\nfunction plot_positions(positions::AbstractVector{<:AbstractVector}; axis=(;))\n    n = length(positions)\n    theme = Theme(\n        Scatter=(\n            markersize=15,\n            cycle=Cycle([:color, :marker], covary=true)\n        )\n    )\n    base_unit = unit(positions[1][1])\n    dim1_conversion = dim2_conversion = Makie.UnitfulConversion(base_unit; units_in_label=false)\n\n    with_theme(theme) do\n        fig = Figure()\n        ax1 = Axis(fig[1, 1]; title=\"XY\", ylabel=\"y\", dim1_conversion, dim2_conversion, axis...)\n        ax2 = Axis(fig[2, 1]; title=\"XZ\", xlabel=\"x\", ylabel=\"z\", dim1_conversion, dim2_conversion, axis...)\n        ax3 = Axis(fig[2, 2]; title=\"YZ\", xlabel=\"y\", dim1_conversion, dim2_conversion, axis...)\n        axs = [ax1, ax2, ax3]\n\n        # Plot each positions\n        plots = map(positions) do pos\n            scatter!(ax1, [pos[1]], [pos[2]])\n            scatter!(ax2, [pos[1]], [pos[3]])\n            scatter!(ax3, [pos[2]], [pos[3]])\n        end\n        Legend(fig[1, 2], plots, [\"C$i\" for i in 1:n]; tellwidth=false, tellheight=false)\n        fig, axs\n    end\nend\n\nplot_positions(R0s)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n(Scene (600px, 450px):\n  0 Plots\n  4 Child Scenes:\n    ├ Scene (600px, 450px)\n    ├ Scene (600px, 450px)\n    ├ Scene (600px, 450px)\n    └ Scene (600px, 450px), Axis[Axis (4 plots), Axis (4 plots), Axis (4 plots)])\n```\n:::\n:::\n\n\n\n### Tetrahedron quality factors: Qsr, elongation, planarity\n\n```julia\n\"\"\"Calculate tetrahedron quality factors\"\"\"\nfunction tetrahedron_quality(positions::AbstractVector{<:AbstractVector})\n    Rvol = volumetric_tensor(positions)\n    # Calculate eigenvaluesz and eigenvectors\n    F = eigen(ustrip(Rvol), sortby=x -> -abs(x)) # Note: we want descending order\n    semiaxes = sqrt.(F.values)  # sqrt of eigenvalues\n    eigenvectors = F.vectors\n    # Calculate quality parameters\n    Qsr = 0.5 * (sum(semiaxes) / semiaxes[1] - 1)\n    Elongation = 1 - (semiaxes[2] / semiaxes[1])\n    Planarity = 1 - (semiaxes[3] / semiaxes[2])\n\n    return (; det=det(Rvol), semiaxes, Qsr, Elongation, Planarity, eigenvectors)\nend\n```\n\n::: {#14 .cell execution_count=1}\n``` {.julia .cell-code}\ntetrahedron_quality(R0s) |> pprint\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(det = 9.491477044462083e16 km⁶,\n semiaxes = [739.1443381212663, 675.706718317148, 616.8497731211844],\n Qsr = 0.8743600030297949,\n Elongation = 0.08582575355357791,\n Planarity = 0.08710427704869828,\n eigenvectors =\n     [0.9278535982834907 0.35338946097171103 0.11917881114737737; -0.1663544954859536 0.10616487882162137 0.9803342288915573; -0.33378718067653923 0.9294325727985404 -0.1572933903159741])\n```\n:::\n:::\n\n\n\n### Magnetopause normal and velocity\n\n```julia\n\"\"\"\n    CVA(positions, times)\n\nConstant Velocity Approach (CVA) for determining boundary normal and velocity.\nSolve timing equation: ``D * m = Δts``\n\nParameters:\n- positions: Positions of 4 spacecraft (4×3 array)\n- times: Times of boundary crossing for each spacecraft\n\"\"\"\nfunction CVA(positions, times)\n    # Calculate time delays relative to first spacecraft\n    Δts = times[2:end] .- times[1]\n    # Calculate position differences relative to first spacecraft\n    D = reduce(hcat, [r - positions[1] for r in positions[2:end]])'\n    m = inv(D) * Δts\n    return m2nV(m)\nend\n```\n\n::: {#16 .cell execution_count=1}\n``` {.julia .cell-code}\n\"Convert timing vector ``𝐦`` to normal vector and velocity where ``𝐦 = 𝐧/V``\"\ntv_to_nv(m) = SpaceTools.m2nV(m)\n\n\"Symmetric timing method using barycenter reference\"\nfunction timing_symmetric(positions, times)\n    # Calculate times relative to average crossing time\n    Δts = times .- tmean(times)\n    R = volumetric_tensor(positions)\n\n    # Calculate sum of time-distance products (ensure column vector)\n    sum_td = sum(t .* r for (t, r) in zip(Δts, positions)) ./ length(Δts)\n\n    # Solve timing equation: R * M = sum_td\n    m = inv(R) * sum_td\n    return tv_to_nv(m)\nend\n\n\"Relative timing method using all spacecraft pairs\"\nfunction timing_relative(positions, times)\n    n = length(positions)\n\n    # Create arrays of all pairs of time differences\n    Δt_matrix = [t_j - t_i for t_i in times, t_j in times]\n\n    # Create arrays of all pairs of position differences\n    Δr_matrices = [\n        [r_j[i] - r_i[i] for r_i in positions, r_j in positions]\n        for i in 1:3  # x, y, z components\n    ]\n\n    # Calculate double sum of time-distance products (ensure column vector)\n    sum_td = [\n        sum(Δt_matrix .* Δr_matrix) for Δr_matrix in Δr_matrices\n    ] ./ (2 * n^2)\n\n    # Calculate volumetric tensor and solve timing equation: R * M = sum_td\n    R = volumetric_tensor(positions)\n    m = inv(R) * sum_td\n    return tv_to_nv(m)\nend\n\n# Example usage with your data\ntimes = t0s\n\n# Calculate using all three methods\nsimple_result = (; method=\"Simple\", CVA(Rs, times)...,)\nsymmetric_result = (; method=\"Symmetric\", timing_symmetric(Rs, times)...,)\nrelative_result = (; method=\"Relative\", timing_relative(Rs, times)...,)\n\n# Pretty Print\ndf = DataFrame([simple_result, symmetric_result, relative_result])\nround_array(x) = round.(x, digits=3)\ndf.n = round_array.(df.n)\ndf.V = round.(u\"km/s\", df.V)\nsimple_table(df)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<table id=\"st-ab9e2159\">\n    <style>\n        #st-ab9e2159 {\n            border: none;\n            margin: 0 auto;\n            padding: 0.25rem;\n            border-collapse: separate;\n            border-spacing: 0.85em 0.2em;\n            line-height: 1.2em;\n        }\n        #st-ab9e2159 tr {\n            background-color: transparent;\n            border: none;\n        }\n        #st-ab9e2159 tr td {\n            vertical-align: top;\n            padding: 0;\n            border: none;\n            background-color: transparent;\n        }\n        #st-ab9e2159 br {\n            line-height: 0em;\n            margin: 0;\n        }\n        #st-ab9e2159 sub {\n            line-height: 0;\n        }\n        #st-ab9e2159 sup {\n            line-height: 0;\n        }\n    </style>\n    <tr><td colspan=\"3\" style=\"border-bottom: 1.5px solid currentColor; padding: 0\"></td></tr>\n    <tr>\n        <td style=\"font-weight:bold;text-align:center;\">method</td>\n        <td style=\"font-weight:bold;text-align:center;\">n</td>\n        <td style=\"font-weight:bold;text-align:center;\">V</td>\n    </tr>\n        <tr><td colspan=\"3\" style=\"border-bottom:1px solid currentColor;padding:0\"></td></tr>    <tr>\n        <td style=\"text-align:center;\">Simple</td>\n        <td style=\"text-align:center;\">[-0.672, 0.518, -0.529]</td>\n        <td style=\"text-align:center;\">112.0 km s⁻¹</td>\n    </tr>\n    <tr>\n        <td style=\"text-align:center;\">Symmetric</td>\n        <td style=\"text-align:center;\">[-0.672, 0.518, -0.529]</td>\n        <td style=\"text-align:center;\">112.0 km s⁻¹</td>\n    </tr>\n    <tr>\n        <td style=\"text-align:center;\">Relative</td>\n        <td style=\"text-align:center;\">[-0.672, 0.518, -0.529]</td>\n        <td style=\"text-align:center;\">112.0 km s⁻¹</td>\n    </tr>\n    <tr><td colspan=\"3\" style=\"border-bottom: 1.5px solid currentColor; padding: 0\"></td></tr>\n</table>\n```\n:::\n:::\n\n\n\nWithin numeric tolerance, the three methods yield the same result. The results of `n` are different from the table, this may be due to different coordinate systems (not implemented for now).\n\n#### Overplot magnetopause velocity\n\n::: {#18 .cell execution_count=1}\n``` {.julia .cell-code}\nfig, axs = plot_positions(R0s)\nres = symmetric_result\nfactor = 2e-1u\"km/s\"\narr = res.n * res.V / factor .|> upreferred\narrows!(axs[1], [0.0], [0.0], arr[1:1], arr[2:2])\narrows!(axs[2], [0.0], [0.0], arr[1:1], arr[3:3])\narrows!(axs[3], [0.0], [0.0], arr[2:2], arr[3:3])\nfig\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n![](ps4_files/figure-html/cell-10-output-1.svg){}\n:::\n:::\n\n\n\n### Current density, and field curvature\n\nUtilizing Julia’s linear algebra library, `lingradest`  function can be efficiently implemented in Julia with fewer than 40 lines of code.\n\n```julia\n\"\"\"\n    lingradest(B1, B2, B3, B4, R1, R2, R3, R4)\n\nCompute spatial derivatives such as grad, div, curl and curvature using reciprocal vector technique (linear interpolation).\n\n# Arguments\n- `B1, B2, B3, B4`: 3-element vectors giving magnetic field measurements at each probe\n- `R1, R2, R3, R4`: 3-element vectors giving the probe positions\n\n# Returns\nA named tuple containing:\n  • Rbary: Barycenter position\n  • Bbc: Magnetic field at the barycenter\n  • Bmag: Magnetic field magnitude at the barycenter\n  • LGBx, LGBy, LGBz: Linear gradient estimators for each component\n  • LD: Linear divergence estimator\n  • LCB: Linear curl estimator\n  • curvature: Field‐line curvature vector\n  • R_c: Field‐line curvature radius\n\n# References\nBased on the method of Chanteur (ISSI, 1998, Ch. 11).\n- [lingradest.pro](https://github.com/spedas/bleeding_edge/blob/master/projects/mms/common/curlometer/lingradest.pro)\n- [lingradest.py](https://github.com/spedas/pyspedas/blob/master/pyspedas/analysis/lingradest.py#L5)\n\"\"\"\nfunction lingradest(B1, B2, B3, B4, R1, R2, R3, R4)\n\n    Rs = [R1, R2, R3, R4]\n    Bs = [B1, B2, B3, B4]\n    Bxs = getindex.(Bs, 1)\n    Bys = getindex.(Bs, 2)\n    Bzs = getindex.(Bs, 3)\n\n    # Barycenter of the tetrahedron\n    Rbary = (R1 .+ R2 .+ R3 .+ R4) ./ 4\n    dRs = Ref(Rbary) .- Rs\n\n    # Reciprocal vectors and μ factors\n    ks = reciprocal_vectors(R1, R2, R3, R4)\n    μs = @. 1 + dot(ks, dRs)\n\n    # Magnetic field at barycenter\n    Bbc = sum(μs .* Bs)\n    Bmag = norm(Bbc)\n\n    # Linear Gradient estimators\n    LGBx = sum(Bxs .* ks)\n    LGBy = sum(Bys .* ks)\n    LGBz = sum(Bzs .* ks)\n    LGB = [LGBx LGBy LGBz]\n    # Linear Divergence estimator\n    div = sum(dot.(ks, Bs))\n\n    # Linear Curl estimator\n    curl = sum(cross.(ks, Bs))\n    # Field-line curvature components\n    curvature = (LGB' * Bbc) / (Bmag^2)\n    R_c = 1 / norm(curvature)\n\n    return (; Rbary, Bbc, Bmag,\n        LGBx, LGBy, LGBz,\n        div, curl, curvature, R_c)\nend\n```\n\n::: {#20 .cell execution_count=1}\n``` {.julia .cell-code}\nB_das = tstack.(DimArray.(B_data))\ntimes = dims(B_das[1], Ti)\nB_interp_das = tinterp.(B_das, Ref(times))\npos_interp_das = tinterp.(tstack.(pos_data), Ref(times))\nres = lingradest(B_interp_das..., pos_interp_das...)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n┌ 2459-element DimStack ┐\n├───────────────────────┴──────────────────────────────────────────────── dims ┐\n  ↓ Ti Sampled{Dates.DateTime} [2001-06-11T20:10:30.036, …, 2001-06-11T20:12:29.966] ForwardOrdered Irregular Points\n├────────────────────────────────────────────────────────────────────── layers ┤\n  :Rbary     eltype: Vector{Unitful.Quantity{Float64, 𝐋, Unitful.FreeUnits{(km,), 𝐋, nothing}}} dims: Ti size: 2459\n  :Bbc       eltype: Vector{Unitful.Quantity{Float64, 𝐌 𝐈⁻¹ 𝐓⁻², Unitful.FreeUnits{(nT,), 𝐌 𝐈⁻¹ 𝐓⁻², nothing}}} dims: Ti size: 2459\n  :Bmag      eltype: Unitful.Quantity{Float64, 𝐌 𝐈⁻¹ 𝐓⁻², Unitful.FreeUnits{(nT,), 𝐌 𝐈⁻¹ 𝐓⁻², nothing}} dims: Ti size: 2459\n  :LGBx      eltype: Vector{Unitful.Quantity{Float64, 𝐌 𝐈⁻¹ 𝐋⁻¹ 𝐓⁻², Unitful.FreeUnits{(km⁻¹, nT), 𝐌 𝐈⁻¹ 𝐋⁻¹ 𝐓⁻², nothing}}} dims: Ti size: 2459\n  :LGBy      eltype: Vector{Unitful.Quantity{Float64, 𝐌 𝐈⁻¹ 𝐋⁻¹ 𝐓⁻², Unitful.FreeUnits{(km⁻¹, nT), 𝐌 𝐈⁻¹ 𝐋⁻¹ 𝐓⁻², nothing}}} dims: Ti size: 2459\n  :LGBz      eltype: Vector{Unitful.Quantity{Float64, 𝐌 𝐈⁻¹ 𝐋⁻¹ 𝐓⁻², Unitful.FreeUnits{(km⁻¹, nT), 𝐌 𝐈⁻¹ 𝐋⁻¹ 𝐓⁻², nothing}}} dims: Ti size: 2459\n  :div       eltype: Unitful.Quantity{Float64, 𝐌 𝐈⁻¹ 𝐋⁻¹ 𝐓⁻², Unitful.FreeUnits{(km⁻¹, nT), 𝐌 𝐈⁻¹ 𝐋⁻¹ 𝐓⁻², nothing}} dims: Ti size: 2459\n  :curl      eltype: Vector{Unitful.Quantity{Float64, 𝐌 𝐈⁻¹ 𝐋⁻¹ 𝐓⁻², Unitful.FreeUnits{(km⁻¹, nT), 𝐌 𝐈⁻¹ 𝐋⁻¹ 𝐓⁻², nothing}}} dims: Ti size: 2459\n  :curvature eltype: Vector{Unitful.Quantity{Float64, 𝐋⁻¹, Unitful.FreeUnits{(km⁻¹,), 𝐋⁻¹, nothing}}} dims: Ti size: 2459\n  :R_c       eltype: Unitful.Quantity{Float64, 𝐋, Unitful.FreeUnits{(km,), 𝐋, nothing}} dims: Ti size: 2459\n└──────────────────────────────────────────────────────────────────────────────┘\n```\n:::\n:::\n\n\n\nThe current density and field curvature at the average time are\n\n::: {#22 .cell execution_count=1}\n``` {.julia .cell-code}\npprint(res[Ti=Near(avgtime)])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(Rbary = [-18121.68409090909 km, -122221.825 km, 12144.868333333334 km],\n Bbc = [7.078833838383838 nT, 8.575880808080807 nT, 8.992595959595958 nT],\n Bmag = 14.301132900522195 nT,\n LGBx = [1.3813172727203307e-5 nT km⁻¹,\n         0.003366241172121136 nT km⁻¹,\n         0.0007368641222804634 nT km⁻¹],\n LGBy = [-0.002049983588783596 nT km⁻¹,\n         0.004280815830114207 nT km⁻¹,\n         0.0007956255498070833 nT km⁻¹],\n LGBz = [-0.006685534578927632 nT km⁻¹,\n         0.004410837499235884 nT km⁻¹,\n         -0.00242034765020941 nT km⁻¹],\n div = 0.0018742813526320009 nT km⁻¹,\n curl = [0.0036152119494287996 nT km⁻¹,\n         0.007422398701208097 nT km⁻¹,\n         -0.005416224760904732 nT km⁻¹],\n curvature = [0.00017402780896923182 km⁻¹,\n              0.00014352956892380598 km⁻¹,\n              -0.00015286433126961862 km⁻¹],\n R_c = 3669.7823651585372 km)\n```\n:::\n:::\n\n\n\n::: {#24 .cell execution_count=1}\n``` {.julia .cell-code}\nfig, axs = tplot(res; figure=(; size=(800, 800)))\ntlines!.(axs, avgtime)\nfig\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n![](ps4_files/figure-html/cell-13-output-1.svg){}\n:::\n:::\n\n\n\n### Magnetopause thickness\n\nThe thickness can be estimated by multiplying the duration of each center crossing by the normal velocity obtained from the preceding analysis. Since we assume that velocity is constant instead of varying, the estimated thickness is simply the mean of the product of the velocity and the duration.\n\n::: {#26 .cell execution_count=1}\n``` {.julia .cell-code}\ndurations = t1s .- t0s\nds = symmetric_result.V .* durations\n@info \"thickness\" ds\n@info \"mean thickness\" mean(ds)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n┌ Info: thickness\n│   ds =\n│    4-element Vector{Quantity{Float64, 𝐋, Unitful.FreeUnits{(km,), 𝐋, nothing}}}:\n│      785.0844206375767 km\n│     1233.7040895733348 km\n│     1009.3942551054557 km\n└     1906.633592976972 km\n┌ Info: mean thickness\n└   mean(ds) = 1233.7040895733348 km\n```\n:::\n:::\n\n\n\n\n## Wave polarization\n\n> [3] Show (see Lecture 09 p. 31) that in the plane of polarization of an elliptically polarized  wave the ellipticity $ε=tan(β)$, and direction of polarization $φ$, can be obtained from the amplitudes ${B_{x0}}', {B_{y0}}'$ and the phase difference, $ψ$, between the y’ and x’ components from  the equations:  $sin(2β)=sin(ψ) 2 {B_{x0}}' {B_{y0}}'/({B_{x0}}'^2 + {B_{y0}}'^2)$, and: $tan(2φ)=cos(ψ) 2 {B_{x0}}' {B_{y0}}'/({B_{x0}}'^2 - {B_{y0}}'^2)$  This is the origin of the wave polarization analysis using minimum variance techniques. They are used both in exploration geophysics and in space physics, so it is good to be convinced of their origin.\n\nWe drop the primes in the plane of polarization for simplicity.\n\nConsider the magnetic field components in the plane of polarization:\n\n$$\n\\begin{aligned}\nB_{x}(t) &= B_{x0} \\cos(ω t), \\\\\nB_{y}(t) &= B_{y0} \\cos(ω t + \\psi).\n\\end{aligned}\n$$\n\nEliminating $ω t$ from these equations (using $cos^2(ωt)+sin^2(ωt)=1$ identity) $yields the ellipse:\n\n$$\n\\left(\\frac{B_{x}}{B_{x0}}\\right)^2 + \\left(\\frac{B_{y}}{B_{y0}}\\right)^2 - 2 \\left(\\frac{B_{x}B_{y}}{B_{x0}B_{y0}}\\right)\\cos\\psi = \\sin^2\\psi.\n$$\n\n**Stokes Parameters** characterize the polarization state:\n\n$$\n\\begin{aligned}\nS_0 &= B_{x0}^2 + B_{y0}^2, \\\\\nS_1 &= B_{x0}^2 - B_{y0}^2, \\\\\nS_2 &= 2 B_{x0} B_{y0}\\cos\\psi, \\\\\nS_3 &= 2 B_{x0} B_{y0}\\sin\\psi.\n\\end{aligned}\n$$\n\nGiven the Stokes parameters, one can solve for the spherical coordinates with the following equations:\n\n$$\n\\begin{aligned}\n& 2 \\psi = \\arctan \\frac{S_2}{S_1} \\\\\n& 2 β = \\arctan \\frac{S_3}{\\sqrt{S_1^2+S_2^2}}\n\\end{aligned}\n$$\n\nUsing Stokes parameters, the ellipticity $\\epsilon = \\tan β$ relates to the minor-to-major axis ratio:\n\n$$\n\\sin(2β) = \\sin \\arctan \\left(\\frac{S_3}{\\sqrt{S_1^2+S_2^2}}\\right) = \\frac{S_3}{S_0} = \\frac{2B_{x0}B_{y0}\\sin\\psi}{B_{x0}^2 + B_{y0}^2}.\n$$\n\nThe angle $\\psi$ of the major axis is given by the following equation:\n\n$$\n\\tan(2\\phi) = \\frac{S_2}{S_1} = \\frac{2B_{x0}B_{y0}\\cos\\psi}{B_{x0}^2 - B_{y0}^2}.\n$$\n\n",
    "supporting": [
      "ps4_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}