{
  "hash": "482d8b0a84ddc0d1b3cb739facddc269",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Problem Set 1\nnumber-sections: true\n---\n\n\n\n\n## AE, Dst, Kp\n\n> Obtain and plot the AE [1min resolution] and Dst [1hr resolution] indices directly from their official site, WDC-C in Kyoto, and Kp [3hr resolution] index from its official site, GFZ Potsdam, the entire month of March 2015.\n> Download ASCII and plot using your own tools which are not SPEDAS. Note it’s easier to download in IAGA-2002 format for AE and Dst and to use the ftp directory download for kp.\n\n### AE and Dst indices\n\n> [a] In a short paragraph explain: What is AE index, and Dst index, and how are they derived? How did you download and plot? Show some lines of the ascii data.\n\nThe AE index (Auroral Electrojet index) and Dst index (Disturbance Storm-Time index) are geomagnetic indices used to measure different aspects of Earth’s magnetic activity. The AE index quantifies the intensity of auroral electrojets, currents flowing in the auroral regions, and is derived from horizontal magnetic field variations measured by magnetometers distributed around the auroral zone. It provides insight into substorm activity and is calculated using the difference between maximum and minimum horizontal components recorded at these stations. The Dst index, on the other hand, measures the intensity of the ring current, a system of charged particles trapped in Earth’s magnetosphere. It is derived from the average horizontal magnetic field variations observed by low-latitude magnetometers. The Dst index is commonly used to assess geomagnetic storms, with negative values indicating stronger disturbances.\n\nWe use julia to download and plot the AE and Dst indices directly from their official site, WDC-C in Kyoto. \n\n- https://wdc.kugi.kyoto-u.ac.jp/aeasy/index.html\n\n- https://wdc.kugi.kyoto-u.ac.jp/dstae/index.html / http://wdc.kugi.kyoto-u.ac.jp/dst_final/201503\n\nFirst we register and download the data dependencies using the `DataDeps` package.\n\n::: {#1d4956dc .cell execution_count=1}\n``` {.julia .cell-code}\nusing DataDeps\n\nregister(DataDep(\"AE Index\",\n    \"\"\"\n    Dataset: AE Index\n    Website: https://wdc.kugi.kyoto-u.ac.jp/aeasy/index.html\n    \"\"\",\n    \"https://wdc.kugi.kyoto-u.ac.jp///aeasy///wwwtmp/WWW_aeasy04087001.dat\"\n))\n\nregister(DataDep(\"Dst Index\",\n    \"\"\"\n    Dataset: Dst Index\n    Website: https://wdc.kugi.kyoto-u.ac.jp/dstae/index.html\n    \"\"\",\n    \"https://wdc.kugi.kyoto-u.ac.jp///dstae///wwwtmp/WWW_dstae04096902.dat\"\n))\n\n# Step 1: Download data\nprintln(\"Downloading AE index data...\")\nae_file = readdir(datadep\"AE Index\", join=true)[1]\n\nprintln(\"Downloading Dst index data...\")\ndst_file = readdir(datadep\"Dst Index\", join=true)[1]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDownloading AE index data...\nDownloading Dst index data...\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\n\"/Users/zijin/.julia/scratchspaces/124859b0-ceae-595e-8997-d05f6a7a8dfe/datadeps/Dst Index/WWW_dstae04096902.dat\"\n```\n:::\n:::\n\n\nThe data is downloaded as text files in IAGA-2002 format. Sample data looks like this:\n\n\n\n\n```{txt}\nDATE       TIME         DOY     AE        AU        AL        AO     |\n2015-03-01 00:00:00.000 060       245.00    122.00   -123.00     -1.00\n2015-03-01 00:01:00.000 060       253.00    125.00   -128.00     -2.00\n2015-03-01 00:02:00.000 060       235.00    122.00   -113.00      5.00\n2015-03-01 00:03:00.000 060       225.00    120.00   -105.00      8.00\n```\n\n```{txt}\nDATE       TIME         DOY     DST                                  |\n2015-03-01 00:00:00.000 060       -34.00\n2015-03-01 01:00:00.000 060       -44.00\n2015-03-01 02:00:00.000 060       -30.00\n2015-03-01 03:00:00.000 060       -31.00\n```\n\n\n\n\nWe then parse the data into TimeSeries using `DelimitedFiles` and `TimeSeries`.\n\n::: {#d150ac99 .cell execution_count=2}\n``` {.julia .cell-code}\nusing DelimitedFiles\nusing TimeSeries\nusing DataFrames\nusing Dates\n\nstart_time = \"2015-03-01T00:00:00\"\nend_time = \"2015-03-31T23:59:59\"\n\n# Step 2: Parse AE data\nfunction load_ae_data(filename)\n    meta = Dict(\n        \"unit\" => \"nT\",\n        \"label\" => \"AE Index\"\n    )\n\n    # Skip the header lines (first 14 lines)\n    data, header = readdlm(filename, skipstart=14, header=true)\n\n    # Convert date and time columns to DateTime\n    datetime = DateTime.(data[:, 1] .* \"T\" .* data[:, 2])\n\n    TimeArray(datetime, data[:, 4:7], header[4:7], meta)\nend\n\nfunction load_dst_data(filename)\n    meta = Dict(\n        \"unit\" => \"nT\",\n        \"label\" => \"Dst Index\"\n    )\n\n    # Skip the header lines (first 17 lines)\n    data, header = readdlm(filename, skipstart=17, header=true)\n\n    # Convert date and time columns to DateTime\n    datetime = DateTime.(data[:, 1] .* \"T\" .* data[:, 2])\n\n    TimeArray(datetime, data[:, 4:4], header[4:4], meta)\nend\n\nprintln(\"Parsing AE data...\")\nae_data = load_ae_data(ae_file)\n\nprintln(\"Parsing Dst data...\")\ndst_data = load_dst_data(dst_file)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nParsing AE data...\nParsing Dst data...\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=3}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre>744×1 TimeArray{Any, 2, DateTime, Matrix{Any}} 2015-03-01T00:00:00 to 2015-03-31T23:00:00\n┌─────────────────────┬───────┐\n│<span class=\"ansi-bold\">                     </span>│<span class=\"ansi-bold\"> DST   </span>│\n├─────────────────────┼───────┤\n│ 2015-03-01T00:00:00 │ -34.0 │\n│ 2015-03-01T01:00:00 │ -44.0 │\n│ 2015-03-01T02:00:00 │ -30.0 │\n│ 2015-03-01T03:00:00 │ -31.0 │\n│ 2015-03-01T04:00:00 │ -28.0 │\n│ 2015-03-01T05:00:00 │ -42.0 │\n│ 2015-03-01T06:00:00 │ -55.0 │\n│ 2015-03-01T07:00:00 │ -53.0 │\n│ 2015-03-01T08:00:00 │ -56.0 │\n│ 2015-03-01T09:00:00 │ -51.0 │\n│ 2015-03-01T10:00:00 │ -50.0 │\n│          ⋮          │   ⋮   │\n│ 2015-03-31T14:00:00 │  -7.0 │\n│ 2015-03-31T15:00:00 │  -5.0 │\n│ 2015-03-31T16:00:00 │  -4.0 │\n│ 2015-03-31T17:00:00 │   2.0 │\n│ 2015-03-31T18:00:00 │  -7.0 │\n│ 2015-03-31T19:00:00 │  -9.0 │\n│ 2015-03-31T20:00:00 │ -10.0 │\n│ 2015-03-31T21:00:00 │ -12.0 │\n│ 2015-03-31T22:00:00 │ -12.0 │\n│ 2015-03-31T23:00:00 │ -12.0 │\n└─────────────────────┴───────┘\n<span class=\"ansi-cyan-fg\">               723 rows omitted</span></pre>\n```\n:::\n\n:::\n:::\n\n\nPlot the data using CairoMakie.\n\n::: {#0a7a6b82 .cell execution_count=3}\n``` {.julia .cell-code}\nusing CairoMakie\n\nMakie.convert_arguments(P::Type{<:Lines}, ta::TimeArray) = convert_arguments(P, timestamp(ta), values(ta))\n\nylabel(ta::TimeArray) = meta(ta)[\"label\"] * (isnothing(meta(ta)[\"unit\"]) || meta(ta)[\"unit\"] == \"\" ? \"\" : \" (\" * meta(ta)[\"unit\"] * \")\")\n\nfunction tplot(tas; linkxaxes=true, figure=(;), kwargs...)\n    f = Figure(; figure...)\n    axs = []\n    for (i, ta) in enumerate(tas)\n        ax = Axis(f[i, 1]; ylabel=ylabel(ta))\n\n        for p in propertynames(ta)\n            lines!(ax, getproperty(ta, p); label=p)\n        end\n\n        # Hide redundant x labels\n        linkxaxes && i != length(tas) && hidexdecorations!(ax, grid=false)\n        push!(axs, ax)\n    end\n    linkxaxes && linkxaxes!(axs...)\n    f\nend\n\nf = tplot([ae_data.AE, dst_data])\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n┌ Warning: Found `resolution` in the theme when creating a `Scene`. The `resolution` keyword for `Scene`s and `Figure`s has been deprecated. Use `Figure(; size = ...` or `Scene(; size = ...)` instead, which better reflects that this is a unitless size and not a pixel resolution. The key could also come from `set_theme!` calls or related theming functions.\n└ @ Makie ~/.julia/packages/Makie/aX4rm/src/scenes.jl:238\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=4}\n![](ps1_files/figure-html/cell-4-output-2.svg){}\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n┌ Warning: Failed to find Base.active_repl_backend.ast_transforms\n└ @ BasicAutoloads ~/.julia/packages/BasicAutoloads/FoSXQ/src/BasicAutoloads.jl:110\n```\n:::\n:::\n\n\n### Kp index\n\n> In a second paragraph do the same as above but for Kp. What is Kp index? And how is it derived?\n\nThe Kp index is a global geomagnetic activity index that quantifies disturbances in Earth’s magnetic field caused by solar activity. Kp is calculated from the K values or the geomagnetic recordings of 13 mid-latitude geomagnetic observatories.\n\nWe use a web service client to load the data (https://kp.gfz-potsdam.de/en/data) from json format into the TimeArray.\n\n::: {#48a3656e .cell execution_count=4}\n``` {.julia .cell-code}\nusing JSON3\n\n\"\"\"\nDownload 'Kp', 'ap', 'Ap', 'Cp', 'C9', 'Hp30', 'Hp60', 'ap30', 'ap60', 'SN', 'Fobs' or 'Fadj' index data from kp.gfz-potsdam.de\n\n# Notes\n- 'start_time' and 'end_time': date format 'YYYY-MM-DDThh:mm:ss'\n\"\"\"\nfunction load_Kp_data(start_time, end_time, index=:Kp)\n    url = \"https://kp.gfz-potsdam.de/app/json/?start=$(start_time)Z&end=$(end_time)Z&index=$(index)\"\n    data = JSON3.read(download(url))\n    datetime = DateTime.(data[:datetime], \"yyyy-mm-ddTHH:MM:SSZ\")\n    TimeArray(datetime, Float64.(data[index]), [index], Dict(\"unit\" => \"\", \"label\" => string(index)))\nend\n\nkp_data = load_Kp_data(start_time, end_time)\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre>248×1 TimeArray{Float64, 1, DateTime, Vector{Float64}} 2015-03-01T00:00:00 to 2015-03-31T21:00:00\n┌─────────────────────┬───────┐\n│<span class=\"ansi-bold\">                     </span>│<span class=\"ansi-bold\"> Kp    </span>│\n├─────────────────────┼───────┤\n│ 2015-03-01T00:00:00 │   5.0 │\n│ 2015-03-01T03:00:00 │   5.0 │\n│ 2015-03-01T06:00:00 │ 5.333 │\n│ 2015-03-01T09:00:00 │ 3.667 │\n│ 2015-03-01T12:00:00 │   2.0 │\n│ 2015-03-01T15:00:00 │ 1.333 │\n│ 2015-03-01T18:00:00 │ 2.333 │\n│ 2015-03-01T21:00:00 │ 2.667 │\n│ 2015-03-02T00:00:00 │   4.0 │\n│ 2015-03-02T03:00:00 │ 4.333 │\n│ 2015-03-02T06:00:00 │ 5.333 │\n│          ⋮          │   ⋮   │\n│ 2015-03-30T18:00:00 │ 0.667 │\n│ 2015-03-30T21:00:00 │ 1.667 │\n│ 2015-03-31T00:00:00 │ 0.333 │\n│ 2015-03-31T03:00:00 │ 0.667 │\n│ 2015-03-31T06:00:00 │ 2.333 │\n│ 2015-03-31T09:00:00 │ 2.333 │\n│ 2015-03-31T12:00:00 │   3.0 │\n│ 2015-03-31T15:00:00 │   3.0 │\n│ 2015-03-31T18:00:00 │ 2.667 │\n│ 2015-03-31T21:00:00 │   2.0 │\n└─────────────────────┴───────┘\n<span class=\"ansi-cyan-fg\">               227 rows omitted</span></pre>\n```\n:::\n\n:::\n:::\n\n\n### Plot\n\n> [c] Plot all 3 indices in a single plot with common time, UT in usual units [2015-03-01 00:00]. If you cannot plot in this format, simply plot in decimal day or decimal hour.\n\n::: {#2086a464 .cell execution_count=5}\n``` {.julia .cell-code}\nf = tplot([ae_data.AE, dst_data, kp_data])\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n┌ Warning: Found `resolution` in the theme when creating a `Scene`. The `resolution` keyword for `Scene`s and `Figure`s has been deprecated. Use `Figure(; size = ...` or `Scene(; size = ...)` instead, which better reflects that this is a unitless size and not a pixel resolution. The key could also come from `set_theme!` calls or related theming functions.\n└ @ Makie ~/.julia/packages/Makie/aX4rm/src/scenes.jl:238\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=6}\n![](ps1_files/figure-html/cell-6-output-2.svg){}\n:::\n:::\n\n\n## Galileo Magnetometer PDS\n\n> Obtain and plot the Galileo magnetometer flyby #8 data of Ganymede from the Planetary Data System (PDS). This is the NASA data repository of Planetary missions, the counterpart of SPDF (Space Physics Data Facility) used for Heliophysics missions. Note that planetary magnetospheric quantities are stored in both. UCLA is the central “node” for PDS with Prof. Walker the PI of that program. Use your own tools such as Excel (but not SPEDAS) to do this (you are welcome to use SPLASH if on Windows (download it from PDS)).\n\n### Coordinate system\n\n> In a short paragraph explain: What is the coordinate system and how did you download and plot?\n\n<!-- https://cdaweb.gsfc.nasa.gov/pub/data/galileo/ -->\n<!-- https://pds-ppi.igpp.ucla.edu/mission/Galileo -->\n<a href=\"https://pds-ppi.igpp.ucla.edu/mission/Galileo/Magnetometer\">PDS/PPI Missions - Galileo</a>\n<!-- https://pds-ppi.igpp.ucla.edu/item/GO-J-MAG-2-REDR-RAW-DATA-V1.0:LPWE_08:LPWE_08.DAT -->\n\nhttps://pds-ppi.igpp.ucla.edu/collection/urn:nasa:pds:galileo-mag-jup-calibrated:data-highres-ganymede\n\nhttps://pds-ppi.igpp.ucla.edu/item/urn:nasa:pds:galileo-mag-jup-calibrated:data-highres-ganymede:orb08_gan_gphio::1.0\nhttps://pds-ppi.igpp.ucla.edu/item/urn:nasa:pds:galileo-mag-jup-calibrated:data-highres-ganymede:orb08_gan_gsprh::1.0\n<!-- Galileo calibrated MAG high-resolution magnetic field and trajectory data from the Ganymede 8 orbit Ganymede flyby recording in Ganymede-centered 'planetocentric' right-handed (GSPRH) coordinates. The data cover 1997-05-07T15:36:00 to 1997-05-07T16:22:00. -->\nhttps://pds-ppi.igpp.ucla.edu/item/urn:nasa:pds:galileo-mag-jup-calibrated:data-highres-ganymede:orb08_gan_irc::1.0\n<!-- Galileo calibrated MAG high-resolution magnetic field and corrected rotor pointing information from the Ganymede 8 orbit Ganymede flyby recording in Despun Spacecraft (IRC) coordinates. The data cover 1997-05-07T15:36:00 to 1997-05-07T16:22:00. -->\nhttps://pds-ppi.igpp.ucla.edu/item/urn:nasa:pds:galileo-mag-jup-calibrated:data-highres-ganymede:orb08_gan_sys3::1.0\n<!-- Galileo calibrated MAG high-resolution magnetic field and trajectory data from the Ganymede 8 orbit Ganymede flyby recording in System III [1965] (SYS3) coordinates. The data cover 1997-05-07T15:36:00 to 1997-05-07T16:22:00. -->\n\n",
    "supporting": [
      "ps1_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}