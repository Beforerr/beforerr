{
  "hash": "0e8e6c251bb8ca0c72f9ef6357de940c",
  "result": {
    "engine": "julia",
    "markdown": "---\ntitle: SpaceTools.jl\nsubtitle: Space data analysis toolbox in Julia\ndate: last-modified\ncategories:\n  - package\n  - Julia\nformat:\n  html:\n    toc-location: left\ncode-links:\n  - text: GitHub Repo\n    href: https://github.com/Beforerr/SpaceTools.jl\n    icon: github\n  - text: Documentation\n    href: https://beforerr.github.io/SpaceTools.jl/dev/\n    icon: globe\nengine: julia  \n---\n\n\n\n\nThink of `SPEDAS` in Julia.\n\n# Getting data is easy\n\n\n\n\n::: {#2 .cell execution_count=1}\n``` {.julia .cell-code}\nusing Speasy\nspz = speasy()\n\nusing Dates\nusing DimensionalData\nusing CairoMakie\nusing SpaceTools\nusing Unitful\nusing LinearAlgebra\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    CondaPkg Found dependencies: /Users/zijin/.julia/packages/DimensionalData/bwTLK/CondaPkg.toml\n    CondaPkg Found dependencies: /Users/zijin/.julia/dev/Speasy/CondaPkg.toml\n    CondaPkg Found dependencies: /Users/zijin/.julia/packages/PythonCall/WMWY0/CondaPkg.toml\n    CondaPkg Dependencies already up to date\n```\n:::\n:::\n\n\n\n::: {#4 .cell execution_count=1}\n``` {.julia .cell-code}\nt0 = DateTime(\"2008-09-05T10:00:00\")\nt1 = DateTime(\"2008-09-05T22:00:00\")\nda = get_data(\"cda/THA_L2_FGM/tha_fgs_gse\", t0, t1) |> DimArray\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n/Users/zijin/projects/beforerr/.CondaPkg/env/lib/python3.11/site-packages/speasy/core/data_containers.py:18: UserWarning: no explicit representation of timezones available for np.datetime64\n  return np.searchsorted(time, np.datetime64(key, 'ns'), side='left')\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n‚îå 14386√ó3 DimArray{Unitful.Quantity{Float32, ùêå ùêà‚Åª¬π ùêì‚Åª¬≤, Unitful.FreeUnits{(nT,), ùêå ùêà‚Åª¬π ùêì‚Åª¬≤, nothing}}, 2} tha_fgs_gse ‚îê\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ dims ‚î§\n  ‚Üì Ti          Sampled{Dates.DateTime} [2008-09-05T10:00:02, ‚Ä¶, 2008-09-05T21:59:59.307] ForwardOrdered Irregular Points,\n  ‚Üí tha_fgs_gse Categorical{Symbol} [Symbol(\"Bx FGS-D\"), Symbol(\"By FGS-D\"), Symbol(\"Bz FGS-D\")] ForwardOrdered\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ metadata ‚î§\n  Dict{String, Any} with 26 entries:\n  \"FILLVAL\"          => Any[-1.0e30]\n  \"DEPEND_EPOCH0\"    => \"tha_fgs_epoch0\"\n  \"FIELDNAM\"         => \"BXYZ GSE Coordinate, nT units\"\n  \"VALIDMAX\"         => Any[25000.0, 25000.0, 25000.0]\n  \"SI_CONVERSION\"    => \"1e-9>T\"\n  \"TENSOR_ORDER\"     => \"1\"\n  \"SC_ID\"            => \"d\"\n  \"DEPEND_1\"         => \"tha_fgs_compno\"\n  \"SCALE_TYP\"        => \"linear\"\n  \"CALIB_SOFTWARE\"   => \"fgm_calibrate, thm_cal_fgm, thm_cal_fit\"\n  \"CATDESC\"          => \"---- FGS (spin-resolution/~3 sec) magnetic  field B in‚Ä¶\n  \"DEPEND_TIME\"      => \"tha_fgs_time\"\n  \"AVG_TYPE\"         => \"standard\"\n  \"DISPLAY_TYPE\"     => \"time_series\"\n  \"VALIDMIN\"         => Any[-25000.0, -25000.0, -25000.0]\n  \"UNITS\"            => \"nT GSE (All Qs)\"\n  \"VAR_NOTES\"        => \"Units are in nanotesla\"\n  \"REPRESENTATION_1\" => \"Rep_xyz\"\n  \"DEPEND_0\"         => \"tha_fgs_epoch\"\n  ‚ãÆ                  => ‚ãÆ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n ‚ãÆ      ‚ã±  \n```\n:::\n:::\n\n\n\n\n\n\n# Array-like Time Series\n\nNo more need to `get_data` and `store_data`. All the functions and operations that work on abstract array would also work on the time series.\n\n\n\n\n::: {#6 .cell execution_count=1}\n``` {.julia .cell-code}\nusing Test\nda1 = get_data(\"cda/OMNI_HRO_1MIN/flow_speed\", t0, t1) |> DimArray\nda2 = get_data(\"cda/OMNI_HRO_1MIN/BX_GSE\", t0, t1) |> DimArray\n\ntry\n    da1 + da2\ncatch e\n    println(e)\n    @test e isa Unitful.DimensionError\nend\n\n# in different times so add would not work\n\ntspan3 = DateTime(\"2008-09-05T10:00:00\"), DateTime(\"2008-09-05T11:00:00\")\ntspan4 = DateTime(\"2008-09-05T11:00:00\"), DateTime(\"2008-09-05T12:00:00\")\nda3 = get_data(\"cda/OMNI_HRO_1MIN/flow_speed\", tspan3...) |> DimArray\nda4 = get_data(\"cda/OMNI_HRO_1MIN/flow_speed\", tspan4...) |> DimArray\ntry\n    da3 + da4\ncatch e\n    println(e)\nend\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUnitful.DimensionError(522.0f0 km s‚Åª¬π, 4.01f0 nT)\nDimensionMismatch(\"Lookup values for DimensionalData.Dimensions.Ti of [Dates.DateTime(\\\"2008-09-05T10:00:00\\\"), Dates.DateTime(\\\"2008-09-05T10:01:00\\\"), Dates.DateTime(\\\"2008-09-05T10:02:00\\\"), Dates.DateTime(\\\"2008-09-05T10:03:00\\\"), Dates.DateTime(\\\"2008-09-05T10:04:00\\\"), Dates.DateTime(\\\"2008-09-05T10:05:00\\\"), Dates.DateTime(\\\"2008-09-05T10:06:00\\\"), Dates.DateTime(\\\"2008-09-05T10:07:00\\\"), Dates.DateTime(\\\"2008-09-05T10:08:00\\\"), Dates.DateTime(\\\"2008-09-05T10:09:00\\\"), Dates.DateTime(\\\"2008-09-05T10:10:00\\\"), Dates.DateTime(\\\"2008-09-05T10:11:00\\\"), Dates.DateTime(\\\"2008-09-05T10:12:00\\\"), Dates.DateTime(\\\"2008-09-05T10:13:00\\\"), Dates.DateTime(\\\"2008-09-05T10:14:00\\\"), Dates.DateTime(\\\"2008-09-05T10:15:00\\\"), Dates.DateTime(\\\"2008-09-05T10:16:00\\\"), Dates.DateTime(\\\"2008-09-05T10:17:00\\\"), Dates.DateTime(\\\"2008-09-05T10:18:00\\\"), Dates.DateTime(\\\"2008-09-05T10:19:00\\\"), Dates.DateTime(\\\"2008-09-05T10:20:00\\\"), Dates.DateTime(\\\"2008-09-05T10:21:00\\\"), Dates.DateTime(\\\"2008-09-05T10:22:00\\\"), Dates.DateTime(\\\"2008-09-05T10:23:00\\\"), Dates.DateTime(\\\"2008-09-05T10:24:00\\\"), Dates.DateTime(\\\"2008-09-05T10:25:00\\\"), Dates.DateTime(\\\"2008-09-05T10:26:00\\\"), Dates.DateTime(\\\"2008-09-05T10:27:00\\\"), Dates.DateTime(\\\"2008-09-05T10:28:00\\\"), Dates.DateTime(\\\"2008-09-05T10:29:00\\\"), Dates.DateTime(\\\"2008-09-05T10:30:00\\\"), Dates.DateTime(\\\"2008-09-05T10:31:00\\\"), Dates.DateTime(\\\"2008-09-05T10:32:00\\\"), Dates.DateTime(\\\"2008-09-05T10:33:00\\\"), Dates.DateTime(\\\"2008-09-05T10:34:00\\\"), Dates.DateTime(\\\"2008-09-05T10:35:00\\\"), Dates.DateTime(\\\"2008-09-05T10:36:00\\\"), Dates.DateTime(\\\"2008-09-05T10:37:00\\\"), Dates.DateTime(\\\"2008-09-05T10:38:00\\\"), Dates.DateTime(\\\"2008-09-05T10:39:00\\\"), Dates.DateTime(\\\"2008-09-05T10:40:00\\\"), Dates.DateTime(\\\"2008-09-05T10:41:00\\\"), Dates.DateTime(\\\"2008-09-05T10:42:00\\\"), Dates.DateTime(\\\"2008-09-05T10:43:00\\\"), Dates.DateTime(\\\"2008-09-05T10:44:00\\\"), Dates.DateTime(\\\"2008-09-05T10:45:00\\\"), Dates.DateTime(\\\"2008-09-05T10:46:00\\\"), Dates.DateTime(\\\"2008-09-05T10:47:00\\\"), Dates.DateTime(\\\"2008-09-05T10:48:00\\\"), Dates.DateTime(\\\"2008-09-05T10:49:00\\\"), Dates.DateTime(\\\"2008-09-05T10:50:00\\\"), Dates.DateTime(\\\"2008-09-05T10:51:00\\\"), Dates.DateTime(\\\"2008-09-05T10:52:00\\\"), Dates.DateTime(\\\"2008-09-05T10:53:00\\\"), Dates.DateTime(\\\"2008-09-05T10:54:00\\\"), Dates.DateTime(\\\"2008-09-05T10:55:00\\\"), Dates.DateTime(\\\"2008-09-05T10:56:00\\\"), Dates.DateTime(\\\"2008-09-05T10:57:00\\\"), Dates.DateTime(\\\"2008-09-05T10:58:00\\\"), Dates.DateTime(\\\"2008-09-05T10:59:00\\\")] and [Dates.DateTime(\\\"2008-09-05T11:00:00\\\"), Dates.DateTime(\\\"2008-09-05T11:01:00\\\"), Dates.DateTime(\\\"2008-09-05T11:02:00\\\"), Dates.DateTime(\\\"2008-09-05T11:03:00\\\"), Dates.DateTime(\\\"2008-09-05T11:04:00\\\"), Dates.DateTime(\\\"2008-09-05T11:05:00\\\"), Dates.DateTime(\\\"2008-09-05T11:06:00\\\"), Dates.DateTime(\\\"2008-09-05T11:07:00\\\"), Dates.DateTime(\\\"2008-09-05T11:08:00\\\"), Dates.DateTime(\\\"2008-09-05T11:09:00\\\"), Dates.DateTime(\\\"2008-09-05T11:10:00\\\"), Dates.DateTime(\\\"2008-09-05T11:11:00\\\"), Dates.DateTime(\\\"2008-09-05T11:12:00\\\"), Dates.DateTime(\\\"2008-09-05T11:13:00\\\"), Dates.DateTime(\\\"2008-09-05T11:14:00\\\"), Dates.DateTime(\\\"2008-09-05T11:15:00\\\"), Dates.DateTime(\\\"2008-09-05T11:16:00\\\"), Dates.DateTime(\\\"2008-09-05T11:17:00\\\"), Dates.DateTime(\\\"2008-09-05T11:18:00\\\"), Dates.DateTime(\\\"2008-09-05T11:19:00\\\"), Dates.DateTime(\\\"2008-09-05T11:20:00\\\"), Dates.DateTime(\\\"2008-09-05T11:21:00\\\"), Dates.DateTime(\\\"2008-09-05T11:22:00\\\"), Dates.DateTime(\\\"2008-09-05T11:23:00\\\"), Dates.DateTime(\\\"2008-09-05T11:24:00\\\"), Dates.DateTime(\\\"2008-09-05T11:25:00\\\"), Dates.DateTime(\\\"2008-09-05T11:26:00\\\"), Dates.DateTime(\\\"2008-09-05T11:27:00\\\"), Dates.DateTime(\\\"2008-09-05T11:28:00\\\"), Dates.DateTime(\\\"2008-09-05T11:29:00\\\"), Dates.DateTime(\\\"2008-09-05T11:30:00\\\"), Dates.DateTime(\\\"2008-09-05T11:31:00\\\"), Dates.DateTime(\\\"2008-09-05T11:32:00\\\"), Dates.DateTime(\\\"2008-09-05T11:33:00\\\"), Dates.DateTime(\\\"2008-09-05T11:34:00\\\"), Dates.DateTime(\\\"2008-09-05T11:35:00\\\"), Dates.DateTime(\\\"2008-09-05T11:36:00\\\"), Dates.DateTime(\\\"2008-09-05T11:37:00\\\"), Dates.DateTime(\\\"2008-09-05T11:38:00\\\"), Dates.DateTime(\\\"2008-09-05T11:39:00\\\"), Dates.DateTime(\\\"2008-09-05T11:40:00\\\"), Dates.DateTime(\\\"2008-09-05T11:41:00\\\"), Dates.DateTime(\\\"2008-09-05T11:42:00\\\"), Dates.DateTime(\\\"2008-09-05T11:43:00\\\"), Dates.DateTime(\\\"2008-09-05T11:44:00\\\"), Dates.DateTime(\\\"2008-09-05T11:45:00\\\"), Dates.DateTime(\\\"2008-09-05T11:46:00\\\"), Dates.DateTime(\\\"2008-09-05T11:47:00\\\"), Dates.DateTime(\\\"2008-09-05T11:48:00\\\"), Dates.DateTime(\\\"2008-09-05T11:49:00\\\"), Dates.DateTime(\\\"2008-09-05T11:50:00\\\"), Dates.DateTime(\\\"2008-09-05T11:51:00\\\"), Dates.DateTime(\\\"2008-09-05T11:52:00\\\"), Dates.DateTime(\\\"2008-09-05T11:53:00\\\"), Dates.DateTime(\\\"2008-09-05T11:54:00\\\"), Dates.DateTime(\\\"2008-09-05T11:55:00\\\"), Dates.DateTime(\\\"2008-09-05T11:56:00\\\"), Dates.DateTime(\\\"2008-09-05T11:57:00\\\"), Dates.DateTime(\\\"2008-09-05T11:58:00\\\"), Dates.DateTime(\\\"2008-09-05T11:59:00\\\")] do not match.\")\n```\n:::\n:::\n\n\n\n\n\n\n# Unit-aware Time Series\n\nUnit is not just a plot label, but also has dimensions meaning. (`Unitful.jl` integration)\n\n\n\n\n::: {#8 .cell execution_count=1}\n``` {.julia .cell-code}\n@info da_dim = dimension(da.data[1])\n@info da_max = maximum(da)\n@info norm.(eachrow(da))[1:10]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[ Info: ùêå ùêà‚Åª¬π ùêì‚Åª¬≤\n[ Info: 65.44341f0 nT\n[ Info: Unitful.Quantity{Float32, ùêå ùêà‚Åª¬π ùêì‚Åª¬≤, Unitful.FreeUnits{(nT,), ùêå ùêà‚Åª¬π ùêì‚Åª¬≤, nothing}}[75.64841f0 nT, 75.72411f0 nT, 75.5134f0 nT, 75.73276f0 nT, 75.492195f0 nT, 75.506645f0 nT, 75.522064f0 nT, 75.78088f0 nT, 75.69144f0 nT, 75.647f0 nT]\n```\n:::\n:::\n\n\n\n\n\n\n# Tplot\n\n\n\n\n::: {#10 .cell execution_count=1}\n``` {.julia .cell-code}\nusing AlgebraOfGraphics\nusing Beforerr\n\npub_theme = Beforerr.theme_pub(;)\naog_theme = Theme(AlgebraOfGraphics.aog_theme())\ntheme = merge(aog_theme, pub_theme)\n\nwith_theme(theme) do\n    f = tplot([da])\n    f.figure\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n![](index_files/figure-html/cell-6-output-1.svg){}\n:::\n:::\n\n\n\n\n\n\n::: {#14 .cell execution_count=1}\n``` {.julia .cell-code}\nfigure = (; size=(1200, 800))\n\ntvars = [\n    \"cda/THA_L2_FGM/tha_fgs_gsmQ\",\n    \"cda/OMNI_HRO_1MIN/flow_speed\",\n    \"cda/OMNI_HRO_1MIN/E\",\n    \"cda/OMNI_HRO_1MIN/Pressure\",\n]\n\ntplot(tvars, t0, t1; figure).figure\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCan't get THA_L2_FGM/tha_fgs_gsmQ without web service, switching to web service\nCan't get THA_L2_FGM/tha_fgs_gsmQ without web service, switching to web service\nCan't get THA_L2_FGM/tha_fgs_gsmQ without web service, switching to web service\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=1}\n![](index_files/figure-html/cell-8-output-2.svg){}\n:::\n:::\n\n\n\n\n\n\n# Dish-cached Time Series\n\nWebServer (CDAWeb) -> Files -> Data structure (`tplot` variable / `numpy` array)\n\nHowever, loading `cdf` files is moderately slow, especially for large data. We can improve the performance by disk-caching the data structure.\n\nWebServer (CDAWeb) -> Files -> Disk-cached data structure -> Data structure\n\n# Interactive Time Series\n\nZoom in and **Zoom out** to explore data.\n\n\n\n\n::: {#16 .cell execution_count=0}\n``` {.julia .cell-code}\nusing GLMakie\n\ntplot(tvars, t0, t1; figure)\n```\n:::\n\n\n\n\n\n\n\n# Multiple dispatch `tplot`\n\n<!-- https://julialang.org/blog/2012/02/why-we-created-julia/ -->\n\n> We are power Matlab users. Some of us are Lisp hackers. Some are Pythonistas, others Rubyists, still others Perl hackers. There are those of us who used Mathematica before we could grow facial hair. There are those who still can't grow facial hair. We've generated more R plots than any sane person should. C is our desert island programming language.\n> We love all of these languages; they are wonderful and powerful. For the work we do ‚Äî scientific computing, machine learning, data mining, large-scale linear algebra, distributed and parallel computing ‚Äî each one is perfect for some aspects of the work and terrible for others. Each one is a trade-off.\n> We are greedy: we want more.\n> We want a language that's open source, with a liberal license. We want the speed of C with the dynamism of Ruby. We want a language that's homoiconic, with true macros like Lisp, but with obvious, familiar mathematical notation like Matlab. We want something as usable for general programming as Python, as easy for statistics as R, as natural for string processing as Perl, as powerful for linear algebra as Matlab, as good at gluing programs together as the shell. Something that is dirt simple to learn, yet keeps the most serious hackers happy. We want it interactive and we want it compiled.\n\nWe wants `tplot` to understand a time series represented as a `vector`-like / `matrix`-like (series/heatmap/spectrogram) / `Function` / `String`\n\nWe wants `tplot` to plot multiple time series on the same figure, it wants to be interactive as well as publication-ready, and it wants to be composable.\n\n\n\n\n::: {#18 .cell execution_count=1}\n``` {.julia .cell-code}\nusing CairoMakie\n# using GLMakie\n\nfigure = (; size=(1600, 1200))\nf = Figure(; figure...)\n\ntvars1 = [\"cda/OMNI_HRO_1MIN/flow_speed\", \"cda/OMNI_HRO_1MIN/E\", \"cda/OMNI_HRO_1MIN/Pressure\"]\ntvars2 = [\"cda/THA_L2_FGM/tha_fgs_gse\"]\ntvars3 = [\"cda/OMNI_HRO_1MIN/BX_GSE\", \"cda/OMNI_HRO_1MIN/BY_GSE\"]\n\ntplot(f[1, 1], tvars1, t0, t1)\ntplot(f[1, 2], tvars2, t0, t1)\ntplot(f[2, 1:2], tvars3, t0, t1)\nf\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n![](index_files/figure-html/cell-10-output-1.svg){}\n:::\n:::\n\n\n\n\n\n\n\n# Links\n\nhttps://github.com/Beforerr/SpaceTools.jl\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}