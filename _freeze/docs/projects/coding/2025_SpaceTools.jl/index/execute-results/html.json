{
  "hash": "f7e2926de476492b41a193f5f39dcb7c",
  "result": {
    "engine": "julia",
    "markdown": "---\ntitle: SPEDAS.jl\nsubtitle: Space data analysis toolbox in Julia\ndate: last-modified\ncategories:\n  - package\n  - Julia\nformat:\n  html:\n    toc-location: left\ncode-links:\n  - text: GitHub Repo\n    href: https://github.com/Beforerr/SPEDAS.jl\n    icon: github\n  - text: Documentation\n    href: https://beforerr.github.io/SPEDAS.jl/dev/\n    icon: globe\nengine: julia  \n---\n\nThink of `SPEDAS` in Julia.\n\n## Installation\n\n::: {#2 .cell execution_count=1}\n``` {.julia .cell-code}\nusing Pkg\nPkg.add([\"Speasy\", \"SPEDAS\", \"DimensionalData\", \"Dates\", \"Unitful\", \"LinearAlgebra\", \"CairoMakie\"])\nPkg.add(url=\"https://github.com/Beforerr/Beforerr.jl\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-green-fg ansi-bold\">   Resolving</span> package versions...\n<span class=\"ansi-green-fg ansi-bold\">  No Changes</span> to `~/projects/beforerr/docs/projects/coding/2025_SpaceTools.jl/Project.toml`\n<span class=\"ansi-green-fg ansi-bold\">  No Changes</span> to `~/projects/beforerr/docs/projects/coding/2025_SpaceTools.jl/Manifest.toml`\n<span class=\"ansi-green-fg ansi-bold\">    Updating</span> git-repo `https://github.com/Beforerr/Beforerr.jl`\n<span class=\"ansi-green-fg ansi-bold\">   Resolving</span> package versions...\n<span class=\"ansi-green-fg ansi-bold\">    Updating</span> `~/projects/beforerr/docs/projects/coding/2025_SpaceTools.jl/Project.toml`\n  <span class=\"ansi-bright-black-fg\">[49aed396] </span><span class=\"ansi-bright-green-fg\">+ Beforerr v0.1.1 `https://github.com/Beforerr/Beforerr.jl#main`</span>\n<span class=\"ansi-green-fg ansi-bold\">    Updating</span> `~/projects/beforerr/docs/projects/coding/2025_SpaceTools.jl/Manifest.toml`\n  <span class=\"ansi-bright-black-fg\">[cbdf2221] </span><span class=\"ansi-bright-green-fg\">+ AlgebraOfGraphics v0.10.3</span>\n  <span class=\"ansi-bright-black-fg\">[49aed396] </span><span class=\"ansi-bright-green-fg\">+ Beforerr v0.1.1 `https://github.com/Beforerr/Beforerr.jl#main`</span>\n  <span class=\"ansi-bright-black-fg\">[8be319e6] </span><span class=\"ansi-bright-green-fg\">+ Chain v0.6.0</span>\n  <span class=\"ansi-bright-black-fg\">[a93c6f00] </span><span class=\"ansi-bright-green-fg\">+ DataFrames v1.7.0</span>\n  <span class=\"ansi-bright-black-fg\">[1313f7d8] </span><span class=\"ansi-bright-green-fg\">+ DataFramesMeta v0.15.4</span>\n  <span class=\"ansi-bright-black-fg\">[85a47980] </span><span class=\"ansi-bright-green-fg\">+ Dictionaries v0.4.5</span>\n  <span class=\"ansi-bright-black-fg\">[38e38edf] </span><span class=\"ansi-bright-green-fg\">+ GLM v1.9.0</span>\n  <span class=\"ansi-bright-black-fg\">[313cdc1a] </span><span class=\"ansi-bright-green-fg\">+ Indexing v1.1.1</span>\n  <span class=\"ansi-bright-black-fg\">[4345ca2d] </span><span class=\"ansi-bright-green-fg\">+ Loess v0.6.4</span>\n  <span class=\"ansi-bright-black-fg\">[7eb4fadd] </span><span class=\"ansi-bright-green-fg\">+ Match v2.4.0</span>\n  <span class=\"ansi-bright-black-fg\">[c020b1a1] </span><span class=\"ansi-bright-green-fg\">+ NaturalSort v1.0.0</span>\n  <span class=\"ansi-bright-black-fg\">[2dfb63ee] </span><span class=\"ansi-bright-green-fg\">+ PooledArrays v1.4.3</span>\n  <span class=\"ansi-bright-black-fg\">[91c51154] </span><span class=\"ansi-bright-green-fg\">+ SentinelArrays v1.4.8</span>\n  <span class=\"ansi-bright-black-fg\">[1277b4bf] </span><span class=\"ansi-bright-green-fg\">+ ShiftedArrays v2.0.0</span>\n  <span class=\"ansi-bright-black-fg\">[3eaba693] </span><span class=\"ansi-bright-green-fg\">+ StatsModels v0.7.4</span>\n  <span class=\"ansi-bright-black-fg\">[9ce81f87] </span><span class=\"ansi-bright-green-fg\">+ TableMetadataTools v0.1.0</span>\nPrecompiling project...\n   1537.4 ms  ✓ StatsModels\n   1516.3 ms  ✓ GLM\n  18307.0 ms  ✓ AlgebraOfGraphics\n   5639.8 ms  ✓ AlgebraOfGraphics → AlgebraOfGraphicsUnitfulExt\n   5612.6 ms  ✓ DimensionalData → DimensionalDataAlgebraOfGraphicsExt\n   6132.7 ms  ✓ Beforerr\n    387.7 ms  ✓ Beforerr → LatexExt\n  7 dependencies successfully precompiled in 34 seconds. 438 already precompiled.\n</pre>\n```\n:::\n\n:::\n:::\n\n\n\n# Getting data is easy\n\n::: {#4 .cell execution_count=1}\n``` {.julia .cell-code}\nusing Speasy\nusing Dates\nusing DimensionalData\nusing CairoMakie\nusing SPEDAS\nusing Unitful\nusing LinearAlgebra\n\nconst spz = speasy\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\nPython: <module 'speasy' from '/Users/zijin/projects/beforerr/docs/projects/coding/2025_SpaceTools.jl/.CondaPkg/.pixi/envs/default/lib/python3.12/site-packages/speasy/__init__.py'>\n```\n:::\n:::\n\n\n\n::: {#6 .cell execution_count=1}\n``` {.julia .cell-code}\nt0 = DateTime(\"2008-09-05T10:00:00\")\nt1 = DateTime(\"2008-09-05T22:00:00\")\nda = get_data(\"cda/THA_L2_FGM/tha_fgs_gse\", t0, t1) |> DimArray\n```\n\n::: {.cell-output .cell-output-stdout}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-cyan-fg ansi-bold\">[ </span><span class=\"ansi-cyan-fg ansi-bold\">Info: </span>Cannot parse tha_fgs_gse unit nT*GSE*(All*Qs)\n</pre>\n```\n:::\n\n:::\n\n::: {.cell-output .cell-output-display execution_count=1}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-bright-black-fg\">┌ </span><span style=\"color:rgb(255,135,95)\">14386</span>×<span style=\"color:rgb(0,135,215)\">3</span> DimArray{Float32, 2}<span style=\"color:rgb(0,175,175)\"> tha_fgs_gse</span><span class=\"ansi-bright-black-fg\"> ┐</span>\n<span class=\"ansi-bright-black-fg\">├──────────────────────────────────────────┴───────────────────────────── dims ┐</span>\n  <span style=\"color:rgb(255,135,95)\">↓ </span><span style=\"color:rgb(255,135,95)\">Ti</span> Sampled{Dates.DateTime} <span style=\"color:rgb(255,135,95)\">[2008-09-05T10:00:02.232, …, 2008-09-05T21:59:59.539]</span> <span style=\"color:rgb(128,128,128)\">ForwardOrdered</span> <span style=\"color:rgb(128,128,128)\">Irregular</span> <span style=\"color:rgb(128,128,128)\">Points</span>,\n  <span style=\"color:rgb(0,135,215)\">→ </span><span style=\"color:rgb(0,135,215)\">Y </span> Sampled{Int64} <span style=\"color:rgb(0,135,215)\">1:3</span> <span style=\"color:rgb(128,128,128)\">ForwardOrdered</span> <span style=\"color:rgb(128,128,128)\">Regular</span> <span style=\"color:rgb(128,128,128)\">Points</span>\n<span class=\"ansi-bright-black-fg\">├──────────────────────────────────────────────────────────────────── metadata ┤</span>\n  Dict{Any, Any} with 26 entries:\n  \"FILLVAL\"          =&gt; Any[-1.0e30]\n  \"DEPEND_EPOCH0\"    =&gt; \"tha_fgs_epoch0\"\n  \"FIELDNAM\"         =&gt; \"BXYZ GSE Coordinate, nT units\"\n  \"VALIDMAX\"         =&gt; Any[25000.0, 25000.0, 25000.0]\n  \"SI_CONVERSION\"    =&gt; \"1e-9&gt;T\"\n  \"TENSOR_ORDER\"     =&gt; \"1\"\n  \"SC_ID\"            =&gt; \"d\"\n  \"DEPEND_1\"         =&gt; \"tha_fgs_compno\"\n  \"SCALE_TYP\"        =&gt; \"linear\"\n  \"CALIB_SOFTWARE\"   =&gt; \"fgm_calibrate, thm_cal_fgm, thm_cal_fit\"\n  \"CATDESC\"          =&gt; \"---- FGS (spin-resolution/~3 sec) magnetic  field B in…\n  \"DEPEND_TIME\"      =&gt; \"tha_fgs_time\"\n  \"AVG_TYPE\"         =&gt; \"standard\"\n  \"DISPLAY_TYPE\"     =&gt; \"time_series\"\n  \"VALIDMIN\"         =&gt; Any[-25000.0, -25000.0, -25000.0]\n  \"UNITS\"            =&gt; \"nT GSE (All Qs)\"\n  \"VAR_NOTES\"        =&gt; \"Units are in nanotesla\"\n  \"REPRESENTATION_1\" =&gt; \"Rep_xyz\"\n  \"DEPEND_0\"         =&gt; \"tha_fgs_epoch\"\n  ⋮                  =&gt; ⋮\n<span class=\"ansi-bright-black-fg\">└──────────────────────────────────────────────────────────────────────────────┘</span>\n ⋮      ⋱  </pre>\n```\n:::\n\n:::\n:::\n\n\n\n# Array-like Time Series\n\nNo more need to `get_data` and `store_data`. All the functions and operations that work on abstract array would also work on the time series.\n\n::: {#8 .cell execution_count=1}\n``` {.julia .cell-code}\n@info da_max = maximum(da)\n@info norm.(eachrow(da))[1:10]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-cyan-fg ansi-bold\">[ </span><span class=\"ansi-cyan-fg ansi-bold\">Info: </span>65.44341\n<span class=\"ansi-cyan-fg ansi-bold\">[ </span><span class=\"ansi-cyan-fg ansi-bold\">Info: </span>Float32[75.64841, 75.72411, 75.5134, 75.73276, 75.492195, 75.506645, 75.522064, 75.78088, 75.69144, 75.647]\n</pre>\n```\n:::\n\n:::\n:::\n\n\n\n::: {#10 .cell execution_count=1}\n``` {.julia .cell-code}\nusing Test\nda1 = get_data(\"cda/OMNI_HRO_1MIN/flow_speed\", t0, t1) |> DimArray\nda2 = get_data(\"cda/OMNI_HRO_1MIN/BX_GSE\", t0, t1) |> DimArray\n\ntry\n    da1 + da2\ncatch e\n    println(e)\n    @test e isa Unitful.DimensionError\nend\n\n# in different times so add would not work\n\ntspan3 = DateTime(\"2008-09-05T10:00:00\"), DateTime(\"2008-09-05T11:00:00\")\ntspan4 = DateTime(\"2008-09-05T11:00:00\"), DateTime(\"2008-09-05T12:00:00\")\nda3 = get_data(\"cda/OMNI_HRO_1MIN/flow_speed\", tspan3...) |> DimArray\nda4 = get_data(\"cda/OMNI_HRO_1MIN/flow_speed\", tspan4...) |> DimArray\ntry\n    da3 + da4\ncatch e\n    println(e)\nend\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUnitful.DimensionError(522.0f0 km s⁻¹, 4.01f0 nT)\nDimensionMismatch(\"Lookup values for DimensionalData.Dimensions.Ti of [Dates.DateTime(\\\"2008-09-05T10:00:00\\\"), Dates.DateTime(\\\"2008-09-05T10:01:00\\\"), Dates.DateTime(\\\"2008-09-05T10:02:00\\\"), Dates.DateTime(\\\"2008-09-05T10:03:00\\\"), Dates.DateTime(\\\"2008-09-05T10:04:00\\\"), Dates.DateTime(\\\"2008-09-05T10:05:00\\\"), Dates.DateTime(\\\"2008-09-05T10:06:00\\\"), Dates.DateTime(\\\"2008-09-05T10:07:00\\\"), Dates.DateTime(\\\"2008-09-05T10:08:00\\\"), Dates.DateTime(\\\"2008-09-05T10:09:00\\\"), Dates.DateTime(\\\"2008-09-05T10:10:00\\\"), Dates.DateTime(\\\"2008-09-05T10:11:00\\\"), Dates.DateTime(\\\"2008-09-05T10:12:00\\\"), Dates.DateTime(\\\"2008-09-05T10:13:00\\\"), Dates.DateTime(\\\"2008-09-05T10:14:00\\\"), Dates.DateTime(\\\"2008-09-05T10:15:00\\\"), Dates.DateTime(\\\"2008-09-05T10:16:00\\\"), Dates.DateTime(\\\"2008-09-05T10:17:00\\\"), Dates.DateTime(\\\"2008-09-05T10:18:00\\\"), Dates.DateTime(\\\"2008-09-05T10:19:00\\\"), Dates.DateTime(\\\"2008-09-05T10:20:00\\\"), Dates.DateTime(\\\"2008-09-05T10:21:00\\\"), Dates.DateTime(\\\"2008-09-05T10:22:00\\\"), Dates.DateTime(\\\"2008-09-05T10:23:00\\\"), Dates.DateTime(\\\"2008-09-05T10:24:00\\\"), Dates.DateTime(\\\"2008-09-05T10:25:00\\\"), Dates.DateTime(\\\"2008-09-05T10:26:00\\\"), Dates.DateTime(\\\"2008-09-05T10:27:00\\\"), Dates.DateTime(\\\"2008-09-05T10:28:00\\\"), Dates.DateTime(\\\"2008-09-05T10:29:00\\\"), Dates.DateTime(\\\"2008-09-05T10:30:00\\\"), Dates.DateTime(\\\"2008-09-05T10:31:00\\\"), Dates.DateTime(\\\"2008-09-05T10:32:00\\\"), Dates.DateTime(\\\"2008-09-05T10:33:00\\\"), Dates.DateTime(\\\"2008-09-05T10:34:00\\\"), Dates.DateTime(\\\"2008-09-05T10:35:00\\\"), Dates.DateTime(\\\"2008-09-05T10:36:00\\\"), Dates.DateTime(\\\"2008-09-05T10:37:00\\\"), Dates.DateTime(\\\"2008-09-05T10:38:00\\\"), Dates.DateTime(\\\"2008-09-05T10:39:00\\\"), Dates.DateTime(\\\"2008-09-05T10:40:00\\\"), Dates.DateTime(\\\"2008-09-05T10:41:00\\\"), Dates.DateTime(\\\"2008-09-05T10:42:00\\\"), Dates.DateTime(\\\"2008-09-05T10:43:00\\\"), Dates.DateTime(\\\"2008-09-05T10:44:00\\\"), Dates.DateTime(\\\"2008-09-05T10:45:00\\\"), Dates.DateTime(\\\"2008-09-05T10:46:00\\\"), Dates.DateTime(\\\"2008-09-05T10:47:00\\\"), Dates.DateTime(\\\"2008-09-05T10:48:00\\\"), Dates.DateTime(\\\"2008-09-05T10:49:00\\\"), Dates.DateTime(\\\"2008-09-05T10:50:00\\\"), Dates.DateTime(\\\"2008-09-05T10:51:00\\\"), Dates.DateTime(\\\"2008-09-05T10:52:00\\\"), Dates.DateTime(\\\"2008-09-05T10:53:00\\\"), Dates.DateTime(\\\"2008-09-05T10:54:00\\\"), Dates.DateTime(\\\"2008-09-05T10:55:00\\\"), Dates.DateTime(\\\"2008-09-05T10:56:00\\\"), Dates.DateTime(\\\"2008-09-05T10:57:00\\\"), Dates.DateTime(\\\"2008-09-05T10:58:00\\\"), Dates.DateTime(\\\"2008-09-05T10:59:00\\\")] and [Dates.DateTime(\\\"2008-09-05T11:00:00\\\"), Dates.DateTime(\\\"2008-09-05T11:01:00\\\"), Dates.DateTime(\\\"2008-09-05T11:02:00\\\"), Dates.DateTime(\\\"2008-09-05T11:03:00\\\"), Dates.DateTime(\\\"2008-09-05T11:04:00\\\"), Dates.DateTime(\\\"2008-09-05T11:05:00\\\"), Dates.DateTime(\\\"2008-09-05T11:06:00\\\"), Dates.DateTime(\\\"2008-09-05T11:07:00\\\"), Dates.DateTime(\\\"2008-09-05T11:08:00\\\"), Dates.DateTime(\\\"2008-09-05T11:09:00\\\"), Dates.DateTime(\\\"2008-09-05T11:10:00\\\"), Dates.DateTime(\\\"2008-09-05T11:11:00\\\"), Dates.DateTime(\\\"2008-09-05T11:12:00\\\"), Dates.DateTime(\\\"2008-09-05T11:13:00\\\"), Dates.DateTime(\\\"2008-09-05T11:14:00\\\"), Dates.DateTime(\\\"2008-09-05T11:15:00\\\"), Dates.DateTime(\\\"2008-09-05T11:16:00\\\"), Dates.DateTime(\\\"2008-09-05T11:17:00\\\"), Dates.DateTime(\\\"2008-09-05T11:18:00\\\"), Dates.DateTime(\\\"2008-09-05T11:19:00\\\"), Dates.DateTime(\\\"2008-09-05T11:20:00\\\"), Dates.DateTime(\\\"2008-09-05T11:21:00\\\"), Dates.DateTime(\\\"2008-09-05T11:22:00\\\"), Dates.DateTime(\\\"2008-09-05T11:23:00\\\"), Dates.DateTime(\\\"2008-09-05T11:24:00\\\"), Dates.DateTime(\\\"2008-09-05T11:25:00\\\"), Dates.DateTime(\\\"2008-09-05T11:26:00\\\"), Dates.DateTime(\\\"2008-09-05T11:27:00\\\"), Dates.DateTime(\\\"2008-09-05T11:28:00\\\"), Dates.DateTime(\\\"2008-09-05T11:29:00\\\"), Dates.DateTime(\\\"2008-09-05T11:30:00\\\"), Dates.DateTime(\\\"2008-09-05T11:31:00\\\"), Dates.DateTime(\\\"2008-09-05T11:32:00\\\"), Dates.DateTime(\\\"2008-09-05T11:33:00\\\"), Dates.DateTime(\\\"2008-09-05T11:34:00\\\"), Dates.DateTime(\\\"2008-09-05T11:35:00\\\"), Dates.DateTime(\\\"2008-09-05T11:36:00\\\"), Dates.DateTime(\\\"2008-09-05T11:37:00\\\"), Dates.DateTime(\\\"2008-09-05T11:38:00\\\"), Dates.DateTime(\\\"2008-09-05T11:39:00\\\"), Dates.DateTime(\\\"2008-09-05T11:40:00\\\"), Dates.DateTime(\\\"2008-09-05T11:41:00\\\"), Dates.DateTime(\\\"2008-09-05T11:42:00\\\"), Dates.DateTime(\\\"2008-09-05T11:43:00\\\"), Dates.DateTime(\\\"2008-09-05T11:44:00\\\"), Dates.DateTime(\\\"2008-09-05T11:45:00\\\"), Dates.DateTime(\\\"2008-09-05T11:46:00\\\"), Dates.DateTime(\\\"2008-09-05T11:47:00\\\"), Dates.DateTime(\\\"2008-09-05T11:48:00\\\"), Dates.DateTime(\\\"2008-09-05T11:49:00\\\"), Dates.DateTime(\\\"2008-09-05T11:50:00\\\"), Dates.DateTime(\\\"2008-09-05T11:51:00\\\"), Dates.DateTime(\\\"2008-09-05T11:52:00\\\"), Dates.DateTime(\\\"2008-09-05T11:53:00\\\"), Dates.DateTime(\\\"2008-09-05T11:54:00\\\"), Dates.DateTime(\\\"2008-09-05T11:55:00\\\"), Dates.DateTime(\\\"2008-09-05T11:56:00\\\"), Dates.DateTime(\\\"2008-09-05T11:57:00\\\"), Dates.DateTime(\\\"2008-09-05T11:58:00\\\"), Dates.DateTime(\\\"2008-09-05T11:59:00\\\")] do not match.\")\n```\n:::\n:::\n\n\n\n# Unit-aware Time Series\n\nUnit is not just a plot label, but also has dimensions meaning. (`Unitful.jl` integration)\n\n::: {#12 .cell execution_count=1}\n``` {.julia .cell-code}\n@info da_dim = dimension(da.data[1])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-cyan-fg ansi-bold\">[ </span><span class=\"ansi-cyan-fg ansi-bold\">Info: </span>NoDims\n</pre>\n```\n:::\n\n:::\n:::\n\n\n\n# Tplot\n\n::: {#14 .cell execution_count=1}\n``` {.julia .cell-code}\nf = tplot(da)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n![](index_files/figure-html/cell-8-output-1.svg){}\n:::\n:::\n\n\n\n::: {#16 .cell execution_count=1}\n``` {.julia .cell-code}\nfigure = (; size=(1200, 800))\n\ntvars = [\n    \"cda/THA_L2_FGM/tha_fgs_gsmQ\",\n    \"cda/OMNI_HRO_1MIN/flow_speed\",\n    \"cda/OMNI_HRO_1MIN/E\",\n    \"cda/OMNI_HRO_1MIN/Pressure\",\n]\n\ntplot(tvars, t0, t1; figure)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre>Can't get THA_L2_FGM/tha_fgs_gsmQ without web service, switching to web service\n<span class=\"ansi-cyan-fg ansi-bold\">[ </span><span class=\"ansi-cyan-fg ansi-bold\">Info: </span>Cannot parse tha_fgs_gsmQ unit nT*GSM\nCan't get THA_L2_FGM/tha_fgs_gsmQ without web service, switching to web service\n<span class=\"ansi-cyan-fg ansi-bold\">[ </span><span class=\"ansi-cyan-fg ansi-bold\">Info: </span>Cannot parse tha_fgs_gsmQ unit nT*GSM\n<span class=\"ansi-cyan-fg ansi-bold\">[ </span><span class=\"ansi-cyan-fg ansi-bold\">Info: </span>Resampling 14386×3 DimArray{Float32, 2} tha_fgs_gsmQ along dimension 1 from 14386 to 6070 points\n</pre>\n```\n:::\n\n:::\n\n::: {.cell-output .cell-output-display execution_count=1}\n![](index_files/figure-html/cell-9-output-2.svg){}\n:::\n:::\n\n\n\n## Spectrogram\n\nhttps://cdaweb.gsfc.nasa.gov/misc/NotesM.html#MMS1_FPI_FAST_L2_DES-DIST\n\n::: {#18 .cell execution_count=1}\n``` {.julia .cell-code}\nts0 = \"2019-01-02T15\" |> DateTime\nts1 = \"2019-01-02T22\" |> DateTime\n\ntvars = [\n    \"cda/MMS1_FGM_SRVY_L2/mms1_fgm_b_gse_srvy_l2_clean\",\n    \"cda/MMS1_FPI_FAST_L2_DES-MOMS/mms1_des_energyspectr_omni_fast\",\n]\ntplot(tvars, ts0, ts1; add_title=true)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre>Can't get MMS1_FGM_SRVY_L2/mms1_fgm_b_gse_srvy_l2_clean without web service, switching to web service\nCan't get MMS1_FGM_SRVY_L2/mms1_fgm_b_gse_srvy_l2_clean without web service, switching to web service\n<span class=\"ansi-cyan-fg ansi-bold\">[ </span><span class=\"ansi-cyan-fg ansi-bold\">Info: </span>Resampling 403194×4 DimArray{Unitful.Quantity{Float32, 𝐌 𝐈⁻¹ 𝐓⁻², Unitful.FreeUnits{(nT,), 𝐌 𝐈⁻¹ 𝐓⁻², nothing}}, 2} mms1_fgm_b_gse_srvy_l2_clean along dimension 1 from 403194 to 6070 points\n</pre>\n```\n:::\n\n:::\n\n::: {.cell-output .cell-output-display execution_count=1}\n![](index_files/figure-html/cell-10-output-2.svg){}\n:::\n:::\n\n\n\n## Overlay plots\n\n::: {#20 .cell execution_count=1}\n``` {.julia .cell-code}\nSDS = SPEDAS.DataSet\nts0 = DateTime(\"2021-01-17\")\nts1 = DateTime(\"2021-01-18\")\n\ndensity_tvar = SDS(\n    \"Density\",\n    [\n        \"cda/PSP_SWP_SPI_SF00_L3_MOM/DENS\",\n        \"cda/PSP_FLD_L3_RFS_LFR_QTN/N_elec\",\n        \"cda/PSP_FLD_L3_SQTN_RFS_V1V2/electron_density\"\n    ]\n)\n\ntvars = [density_tvar]\n\ntplot(tvars, ts0, ts1; add_title=true)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-cyan-fg ansi-bold\">[ </span><span class=\"ansi-cyan-fg ansi-bold\">Info: </span>Resampling 24704×1 DimArray{Unitful.Quantity{Float32, 𝐋⁻³, Unitful.FreeUnits{(cm⁻³,), 𝐋⁻³, nothing}}, 2} DENS along dimension 1 from 24704 to 6070 points\n<span class=\"ansi-cyan-fg ansi-bold\">[ </span><span class=\"ansi-cyan-fg ansi-bold\">Info: </span>Resampling 24272×1 DimArray{Unitful.Quantity{Float32, 𝐋⁻³, Unitful.FreeUnits{(cm⁻³,), 𝐋⁻³, nothing}}, 2} N_elec along dimension 1 from 24272 to 6070 points\n<span class=\"ansi-cyan-fg ansi-bold\">[ </span><span class=\"ansi-cyan-fg ansi-bold\">Info: </span>Resampling 24282×1 DimArray{Unitful.Quantity{Float32, 𝐋⁻³, Unitful.FreeUnits{(cm⁻³,), 𝐋⁻³, nothing}}, 2} electron_density along dimension 1 from 24282 to 6070 points\n</pre>\n```\n:::\n\n:::\n\n::: {.cell-output .cell-output-display execution_count=1}\n![](index_files/figure-html/cell-11-output-2.svg){}\n:::\n:::\n\n\n\n## Complex requests and flexible layout\n\n::: {#22 .cell execution_count=1}\n``` {.julia .cell-code}\ndata = let intervals = [\"2019-01-02T15\", \"2019-01-02T16\"]\n    products = [\n        spz.inventories.tree.cda.MMS.MMS1.FGM.MMS1_FGM_SRVY_L2.mms1_fgm_b_gse_srvy_l2_clean,\n        spz.inventories.tree.cda.MMS.MMS1.SCM.MMS1_SCM_SRVY_L2_SCSRVY.mms1_scm_acb_gse_scsrvy_srvy_l2,\n        spz.inventories.tree.cda.MMS.MMS1.DES.MMS1_FPI_FAST_L2_DES_MOMS.mms1_des_bulkv_gse_fast,\n        spz.inventories.tree.cda.MMS.MMS1.DES.MMS1_FPI_FAST_L2_DES_MOMS.mms1_des_temppara_fast,\n        spz.inventories.tree.cda.MMS.MMS1.DES.MMS1_FPI_FAST_L2_DES_MOMS.mms1_des_tempperp_fast,\n        spz.inventories.tree.cda.MMS.MMS1.DES.MMS1_FPI_FAST_L2_DES_MOMS.mms1_des_energyspectr_omni_fast,\n        spz.inventories.tree.cda.MMS.MMS1.DIS.MMS1_FPI_FAST_L2_DIS_MOMS.mms1_dis_energyspectr_omni_fast\n    ]\n    get_data(products, intervals)\nend\n\nlet figure = (; size=(1200, 1200)), add_title = true\n    f = Figure(; figure...)\n    tplot(f[1, 1], data[1:3]; add_title)\n    tplot(f[1, 2], [data[4:5], data[6:7]...]; add_title)\n    f\nend\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCan't get MMS1_FGM_SRVY_L2/mms1_fgm_b_gse_srvy_l2_clean without web service, switching to web service\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=1}\n![](index_files/figure-html/cell-12-output-2.svg){}\n:::\n:::\n\n\n\n# Disk-cached Time Series\n\nWebServer (CDAWeb) -> Files -> Data structure (`tplot` variable / `numpy` array)\n\nHowever, loading `cdf` files is moderately slow, especially for large data. We can improve the performance by disk-caching the data structure (`numpy` array).\n\nWebServer (CDAWeb) -> Files -> Disk-cached data structure -> Data structure\n\n# Interactive Time Series\n\nUse `GLMakie` to zoom in and **Zoom out** to explore data.\n\n::: {#24 .cell execution_count=0}\n``` {.julia .cell-code}\ntplot(tvars, t0, t1; figure)\n```\n:::\n\n\n\n\n# Multiple dispatch `tplot`\n\n<!-- https://julialang.org/blog/2012/02/why-we-created-julia/ -->\n\n> We are power Matlab users. Some of us are Lisp hackers. Some are Pythonistas, others Rubyists, still others Perl hackers. There are those of us who used Mathematica before we could grow facial hair. There are those who still can't grow facial hair. We've generated more R plots than any sane person should. C is our desert island programming language.\n> We love all of these languages; they are wonderful and powerful. For the work we do — scientific computing, machine learning, data mining, large-scale linear algebra, distributed and parallel computing — each one is perfect for some aspects of the work and terrible for others. Each one is a trade-off.\n> We are greedy: we want more.\n> We want a language that's open source, with a liberal license. We want the speed of C with the dynamism of Ruby. We want a language that's homoiconic, with true macros like Lisp, but with obvious, familiar mathematical notation like Matlab. We want something as usable for general programming as Python, as easy for statistics as R, as natural for string processing as Perl, as powerful for linear algebra as Matlab, as good at gluing programs together as the shell. Something that is dirt simple to learn, yet keeps the most serious hackers happy. We want it interactive and we want it compiled.\n\nWe want `tplot` to understand a time series represented as a `vector`-like / `matrix`-like (series/heatmap/spectrogram) / `Function` / `String`;\nWe want `tplot` to plot multiple time series on the same figure;\nWe want `tplot` to be interactive as well as publication-ready; \nand we want `tplot` to be composable.\n\n::: {#26 .cell execution_count=1}\n``` {.julia .cell-code}\nfigure = (; size=(1600, 1200))\nf = Figure(; figure...)\n\ntvars1 = [\"cda/OMNI_HRO_1MIN/flow_speed\", \"cda/OMNI_HRO_1MIN/E\", \"cda/OMNI_HRO_1MIN/Pressure\"]\ntvars2 = [\"cda/THA_L2_FGM/tha_fgs_gse\"]\ntvars3 = [\"cda/OMNI_HRO_1MIN/BX_GSE\", \"cda/OMNI_HRO_1MIN/BY_GSE\"]\n\nt0 = DateTime(\"2008-09-05T10:00:00\")\nt1 = DateTime(\"2008-09-05T22:00:00\")\n\ntplot(f[1, 1], tvars1, t0, t1)\ntplot(f[1, 2], tvars2, t0, t1)\ntplot(f[2, 1:2], tvars3, t0, t1)\nf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-cyan-fg ansi-bold\">[ </span><span class=\"ansi-cyan-fg ansi-bold\">Info: </span>Cannot parse tha_fgs_gse unit nT*GSE*(All*Qs)\n<span class=\"ansi-cyan-fg ansi-bold\">[ </span><span class=\"ansi-cyan-fg ansi-bold\">Info: </span>Cannot parse tha_fgs_gse unit nT*GSE*(All*Qs)\n<span class=\"ansi-cyan-fg ansi-bold\">[ </span><span class=\"ansi-cyan-fg ansi-bold\">Info: </span>Resampling 14386×3 DimArray{Float32, 2} tha_fgs_gse along dimension 1 from 14386 to 6070 points\n</pre>\n```\n:::\n\n:::\n\n::: {.cell-output .cell-output-display execution_count=1}\n![](index_files/figure-html/cell-14-output-2.svg){}\n:::\n:::\n\n\n\n",
    "supporting": [
      "index_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}