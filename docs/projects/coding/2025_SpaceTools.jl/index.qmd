---
title: SpaceTools.jl
subtitle: Space data analysis toolbox in Julia
date: last-modified
categories:
  - package
  - Julia
format:
  html:
    toc-location: left
code-links:
  - text: GitHub Repo
    href: https://github.com/Beforerr/SpaceTools.jl
    icon: github
  - text: Documentation
    href: https://beforerr.github.io/SpaceTools.jl/dev/
    icon: globe
engine: julia  
---

Think of `SPEDAS` in Julia.

## Installation

```julia
using Pkg
Pkg.add("https://github.com/SciQLop/Speasy.jl")
Pkg.add("https://github.com/Beforerr/SpaceTools.jl")
Pkg.add("https://github.com/Beforerr/Beforerr.jl")
```

# Getting data is easy

```{julia}
using Speasy
spz = speasy()

using Dates
using DimensionalData
using CairoMakie
using SpaceTools
using Unitful
using LinearAlgebra
```

```{julia}
t0 = DateTime("2008-09-05T10:00:00")
t1 = DateTime("2008-09-05T22:00:00")
da = get_data("cda/THA_L2_FGM/tha_fgs_gse", t0, t1) |> DimArray
```

# Array-like Time Series

No more need to `get_data` and `store_data`. All the functions and operations that work on abstract array would also work on the time series.

```{julia}
@info da_max = maximum(da)
@info norm.(eachrow(da))[1:10]
```

```{julia}
using Test
da1 = get_data("cda/OMNI_HRO_1MIN/flow_speed", t0, t1) |> DimArray
da2 = get_data("cda/OMNI_HRO_1MIN/BX_GSE", t0, t1) |> DimArray

try
    da1 + da2
catch e
    println(e)
    @test e isa Unitful.DimensionError
end

# in different times so add would not work

tspan3 = DateTime("2008-09-05T10:00:00"), DateTime("2008-09-05T11:00:00")
tspan4 = DateTime("2008-09-05T11:00:00"), DateTime("2008-09-05T12:00:00")
da3 = get_data("cda/OMNI_HRO_1MIN/flow_speed", tspan3...) |> DimArray
da4 = get_data("cda/OMNI_HRO_1MIN/flow_speed", tspan4...) |> DimArray
try
    da3 + da4
catch e
    println(e)
end
```

# Unit-aware Time Series

Unit is not just a plot label, but also has dimensions meaning. (`Unitful.jl` integration)

```{julia}
@info da_dim = dimension(da.data[1])
```

# Tplot

```{julia}
f = tplot([da])
f.figure
```

```{julia}
figure = (; size=(1200, 800))

tvars = [
    "cda/THA_L2_FGM/tha_fgs_gsmQ",
    "cda/OMNI_HRO_1MIN/flow_speed",
    "cda/OMNI_HRO_1MIN/E",
    "cda/OMNI_HRO_1MIN/Pressure",
]

tplot(tvars, t0, t1; figure)
```

## Spectrogram

https://cdaweb.gsfc.nasa.gov/misc/NotesM.html#MMS1_FPI_FAST_L2_DES-DIST

```{julia}
ts0 = "2019-01-02T15" |> DateTime
ts1 = "2019-01-02T22" |> DateTime

tvars = [
    "cda/MMS1_FGM_SRVY_L2/mms1_fgm_b_gse_srvy_l2_clean",
    "cda/MMS1_FPI_FAST_L2_DES-MOMS/mms1_des_energyspectr_omni_fast",
]
tplot(tvars, ts0, ts1; add_title=true)
```

## Overlay plots

```{julia}
SDS = SpaceTools.DataSet
ts0 = DateTime("2021-01-17")
ts1 = DateTime("2021-01-18")

density_tvar = SDS(
    "Density",
    [
        "cda/PSP_SWP_SPI_SF00_L3_MOM/DENS",
        "cda/PSP_FLD_L3_RFS_LFR_QTN/N_elec",
        "cda/PSP_FLD_L3_SQTN_RFS_V1V2/electron_density"
    ]
)

tvars = [density_tvar]

tplot(tvars, ts0, ts1; add_title=true)
```

# Disk-cached Time Series

WebServer (CDAWeb) -> Files -> Data structure (`tplot` variable / `numpy` array)

However, loading `cdf` files is moderately slow, especially for large data. We can improve the performance by disk-caching the data structure (`numpy` array).

WebServer (CDAWeb) -> Files -> Disk-cached data structure -> Data structure

# Interactive Time Series

Use `GLMakie` to zoom in and **Zoom out** to explore data.

```{julia}
#| eval: false
tplot(tvars, t0, t1; figure)
```


# Multiple dispatch `tplot`

<!-- https://julialang.org/blog/2012/02/why-we-created-julia/ -->

> We are power Matlab users. Some of us are Lisp hackers. Some are Pythonistas, others Rubyists, still others Perl hackers. There are those of us who used Mathematica before we could grow facial hair. There are those who still can't grow facial hair. We've generated more R plots than any sane person should. C is our desert island programming language.
> We love all of these languages; they are wonderful and powerful. For the work we do — scientific computing, machine learning, data mining, large-scale linear algebra, distributed and parallel computing — each one is perfect for some aspects of the work and terrible for others. Each one is a trade-off.
> We are greedy: we want more.
> We want a language that's open source, with a liberal license. We want the speed of C with the dynamism of Ruby. We want a language that's homoiconic, with true macros like Lisp, but with obvious, familiar mathematical notation like Matlab. We want something as usable for general programming as Python, as easy for statistics as R, as natural for string processing as Perl, as powerful for linear algebra as Matlab, as good at gluing programs together as the shell. Something that is dirt simple to learn, yet keeps the most serious hackers happy. We want it interactive and we want it compiled.

We want `tplot` to understand a time series represented as a `vector`-like / `matrix`-like (series/heatmap/spectrogram) / `Function` / `String`;
We want `tplot` to plot multiple time series on the same figure;
We want `tplot` to be interactive as well as publication-ready; 
and we want `tplot` to be composable.

```{julia}
figure = (; size=(1600, 1200))
f = Figure(; figure...)

tvars1 = ["cda/OMNI_HRO_1MIN/flow_speed", "cda/OMNI_HRO_1MIN/E", "cda/OMNI_HRO_1MIN/Pressure"]
tvars2 = ["cda/THA_L2_FGM/tha_fgs_gse"]
tvars3 = ["cda/OMNI_HRO_1MIN/BX_GSE", "cda/OMNI_HRO_1MIN/BY_GSE"]

t0 = DateTime("2008-09-05T10:00:00")
t1 = DateTime("2008-09-05T22:00:00")

tplot(f[1, 1], tvars1, t0, t1)
tplot(f[1, 2], tvars2, t0, t1)
tplot(f[2, 1:2], tvars3, t0, t1)
f
```


# Links

https://github.com/Beforerr/SpaceTools.jl