---
title: Problem Set 4
number-sections: true
engine: julia
---

## Barycentric coordinates

> [1] We discussed barycentric coordinates in Lecture 08, pp. 11-12, and they are covered in Ch. 14 (Chanteur) in the ISSI book pp. 350-351. They are defined based on equation: $\left(\sum_{Œ±=1}^4 Œº_Œ±\right) \mathbf{r}=\sum_{Œ±=1}^4\left(Œº_Œ± \mathbf{r}_Œ±\right)$ with the constraint $\sum_{Œ±=1}^4 Œº_Œ±=1$. We said that this physically means $Œº_Œ±(\mathbf{r})=1+\mathbf{k}_Œ± \cdot\left(\mathbf{r}-\mathbf{r}_Œ±\right)$, a linear decrease of the weight with increasing distance from the vertex $r_Œ±$ of the tetrahedron, scaled according to the reciprocal vector (the inverted distance of vertex to plane across it).

> Prove that $Œº_Œ±(\mathbf{r})=1+\mathbf{k}_Œ± \cdot\left(\mathbf{r}-\mathbf{r}_Œ±\right)$ by using the inverse transformation: $\mathbf{Œº}=\mathbf{T}^{-1}\left(\mathbf{r}-\mathbf{r}_4\right)$.

In barycentric coordinates we have
$$
\mathbf{r}-\mathbf{r}_4
    = \sum_{Œ±=1}^4(Œº_Œ± \mathbf{r}_Œ±) -  (\sum_{Œ±=1}^4 Œº_Œ±) \mathbf{r}_4
    = Œº_1 \mathbf{d}_1 + Œº_2 \mathbf{d}_2 + Œº_3\mathbf{d}_3.
$$

A geometric way to see the first row of $T^{-1}$ is to note that

$$
\mathbf{k}_1 = \frac{\mathbf{d}_2\times\mathbf{d}_3} {\mathbf{d}_1\cdot(\mathbf{d}_2\times\mathbf{d}_3)}
$$

is the unique ‚Äúreciprocal vector‚Äù satisfying $\mathbf{k}_1\cdot\mathbf{d}_1=1$ and $\mathbf{k}_1\cdot\mathbf{d}_2= \mathbf{k}_1\cdot\mathbf{d}_3=0$ .

so

$$
T^{-1} = \left(\begin{array}{l}
\mathbf{k}_1 \\
\mathbf{k}_2 \\
\mathbf{k}_3
\end{array}\right)
$$

with $\mathbf{k}_2,\mathbf{k}_3$ defined similarly by the appropriate cross products and normalization.

Therefore from $\mathbf{Œº}=\mathbf{T}^{-1}\left(\mathbf{r}-\mathbf{r}_4\right)$, we have $Œº_i = \mathbf{k}_i\cdot(\mathbf{r}-\mathbf{r}_{4})$, where $i=1,2,3$.

Notice that $\mathbf{r}-\mathbf{r}_{4} = (\mathbf{r}-\mathbf{r}_1) + \underbrace{(\mathbf{r}_1-\mathbf{r}_{4})}_{=\mathbf{d}_1}$ and by construction $\mathbf{k}_1\cdot\mathbf{d}_1=1$.

Therefore

$$
Œº_1 = \mathbf{k}_1 \cdot(\mathbf{r}-\mathbf{r}_1) + \mathbf{k}_1 \cdot\mathbf{d}_1
    = 1 + \mathbf{k}_1 \cdot(\mathbf{r}-\mathbf{r}_1)
$$

By identical reasoning, $Œº_Œ± = 1 + \mathbf{k}_Œ± \cdot (\mathbf{r}-\mathbf{r}_Œ±)$.

## Cluster magnetopause crossing

> [2] For a CLUSTER magnetopause crossing on 2001/06/11 other than the one in the crib...
> - compute Qsr, Elongation, Planarity and then the magnetopause normal and velocity. 
> - Compute the current density, and field curvature at that location. 
> - Compute the magnetopause thickness. 
> - Compare with table below from Keyser et al. (original from Dunlop and Balogh, 2004).
> - Create and discuss plots of data, satellite positions, table of results from the ‚Äúsimple‚Äù and from either the ‚Äúsymmetric‚Äù or the ‚Äúrelative timing‚Äù methods. See next page for details.

> Details: 
> - I have released a crib sheet (Hwk04_02.pro) to help. It is not to be executed and run. Take it as a cheat-sheet: a collection of command-line steps to aid your construction of your own code. I brought over the Cluster CDFs, which you can read using IDL or Python tools or spd_gui. (The data does not exist in SPDF, I had to get it from the Cluster Active Archive. Perhaps AMDA can help you read it.). Use ChatGPT widely to help you, but review documentation when unsure.
> - The IDL code above uses helper functions for the linear gradient estimation and timing analysis which we discussed in class, and I include in the zip file. You may rewrite them in Python if you wish or use them directly in IDL (they are very simple). They are called lingradest.pro and mptiming.pro.

::: {.callout-warning}
Functions in this report are included in `SpaceTools` and documented in the following page: [Multi-spacecraft analysis methods](https://beforerr.github.io/SpaceTools.jl/dev/explanations/multispacecraft/). However, they are experimental, not tested, and may change without notice.
:::

### Loading the data

To load the data from CSA server, we implement a module using `HAPI` protocol. More details can be found in the [`HAPI.jl`](https://github.com/Beforerr/HAPI.jl).

```{julia}
using CairoMakie
using HAPI
using Dates
using SpaceTools
using DimensionalData
using Unitful
using DataFrames
using SummaryTables
using PrettyPrinting
```

```{julia}
trange = timerange("2001-06-11T20:10:30", "2001-06-11T20:12:30")
B_vars = [
    "csa/C1_CP_FGM_FULL/B_vec_xyz_gse",
    "csa/C2_CP_FGM_FULL/B_vec_xyz_gse",
    "csa/C3_CP_FGM_FULL/B_vec_xyz_gse",
    "csa/C4_CP_FGM_FULL/B_vec_xyz_gse",
]
pos_vars = [
    "csa/C1_CP_FGM_FULL/sc_pos_xyz_gse",
    "csa/C2_CP_FGM_FULL/sc_pos_xyz_gse",
    "csa/C3_CP_FGM_FULL/sc_pos_xyz_gse",
    "csa/C4_CP_FGM_FULL/sc_pos_xyz_gse",
]
B_data = get_data.(B_vars, trange)
pos_data = get_data.(pos_vars, trange) .|> DimArray
```

```{julia}
# Make start time of the field-rotation (start of By, Bz change) fiducial
t0s = [
    "2001-06-11T20:11:43",
    "2001-06-11T20:11:49",
    "2001-06-11T20:11:55",
    "2001-06-11T20:11:39",
] .|> DateTime
t1s = [
    "2001-06-11T20:11:50",
    "2001-06-11T20:12:00",
    "2001-06-11T20:12:04",
    "2001-06-11T20:11:56",
] .|> DateTime

avgtime = tmean(t0s)
```

```{julia}
fig, axs = tplot(B_data)
tlines!.(axs, avgtime)
tlines!.(axs, t0s)
tlines!.(axs, t1s)
fig
```

### Plot sc positions relative to mesocenter

```{julia}
using Statistics

Rs = tinterp.(pos_data, avgtime) # Rs = getindex.(pos_data, Ti=Near(avgtime))
R00 = mean(Rs)
R0s = Rs .- Ref(R00)
```

```{julia}
function plot_positions(positions::AbstractVector{<:AbstractVector}; axis=(;))
    n = length(positions)
    theme = Theme(
        Scatter=(
            markersize=15,
            cycle=Cycle([:color, :marker], covary=true)
        )
    )
    base_unit = unit(positions[1][1])
    dim1_conversion = dim2_conversion = Makie.UnitfulConversion(base_unit; units_in_label=false)

    with_theme(theme) do
        fig = Figure()
        ax1 = Axis(fig[1, 1]; title="XY", ylabel="y", dim1_conversion, dim2_conversion, axis...)
        ax2 = Axis(fig[2, 1]; title="XZ", xlabel="x", ylabel="z", dim1_conversion, dim2_conversion, axis...)
        ax3 = Axis(fig[2, 2]; title="YZ", xlabel="y", dim1_conversion, dim2_conversion, axis...)
        axs = [ax1, ax2, ax3]

        # Plot each positions
        plots = map(positions) do pos
            scatter!(ax1, [pos[1]], [pos[2]])
            scatter!(ax2, [pos[1]], [pos[3]])
            scatter!(ax3, [pos[2]], [pos[3]])
        end
        Legend(fig[1, 2], plots, ["C$i" for i in 1:n]; tellwidth=false, tellheight=false)
        fig, axs
    end
end

plot_positions(R0s)
```

### Tetrahedron quality factors: Qsr, elongation, planarity

```julia
"""Calculate tetrahedron quality factors"""
function tetrahedron_quality(positions::AbstractVector{<:AbstractVector})
    Rvol = volumetric_tensor(positions)
    # Calculate eigenvaluesz and eigenvectors
    F = eigen(ustrip(Rvol), sortby=x -> -abs(x)) # Note: we want descending order
    semiaxes = sqrt.(F.values)  # sqrt of eigenvalues
    eigenvectors = F.vectors
    # Calculate quality parameters
    Qsr = 0.5 * (sum(semiaxes) / semiaxes[1] - 1)
    Elongation = 1 - (semiaxes[2] / semiaxes[1])
    Planarity = 1 - (semiaxes[3] / semiaxes[2])

    return (; det=det(Rvol), semiaxes, Qsr, Elongation, Planarity, eigenvectors)
end
```

```{julia}
tetrahedron_quality(R0s) |> pprint
```

### Magnetopause normal and velocity

```julia
"""
    CVA(positions, times)

Constant Velocity Approach (CVA) for determining boundary normal and velocity.
Solve timing equation: ``D * m = Œîts``

Parameters:
- positions: Positions of 4 spacecraft (4√ó3 array)
- times: Times of boundary crossing for each spacecraft
"""
function CVA(positions, times)
    # Calculate time delays relative to first spacecraft
    Œîts = times[2:end] .- times[1]
    # Calculate position differences relative to first spacecraft
    D = reduce(hcat, [r - positions[1] for r in positions[2:end]])'
    m = inv(D) * Œîts
    return m2nV(m)
end
```

```{julia}
"Convert timing vector ``ùê¶`` to normal vector and velocity where ``ùê¶ = ùêß/V``"
tv_to_nv(m) = SpaceTools.m2nV(m)

"Symmetric timing method using barycenter reference"
function timing_symmetric(positions, times)
    # Calculate times relative to average crossing time
    Œîts = times .- tmean(times)
    R = volumetric_tensor(positions)

    # Calculate sum of time-distance products (ensure column vector)
    sum_td = sum(t .* r for (t, r) in zip(Œîts, positions)) ./ length(Œîts)

    # Solve timing equation: R * M = sum_td
    m = inv(R) * sum_td
    return tv_to_nv(m)
end

"Relative timing method using all spacecraft pairs"
function timing_relative(positions, times)
    n = length(positions)

    # Create arrays of all pairs of time differences
    Œît_matrix = [t_j - t_i for t_i in times, t_j in times]

    # Create arrays of all pairs of position differences
    Œîr_matrices = [
        [r_j[i] - r_i[i] for r_i in positions, r_j in positions]
        for i in 1:3  # x, y, z components
    ]

    # Calculate double sum of time-distance products (ensure column vector)
    sum_td = [
        sum(Œît_matrix .* Œîr_matrix) for Œîr_matrix in Œîr_matrices
    ] ./ (2 * n^2)

    # Calculate volumetric tensor and solve timing equation: R * M = sum_td
    R = volumetric_tensor(positions)
    m = inv(R) * sum_td
    return tv_to_nv(m)
end

# Example usage with your data
times = t0s

# Calculate using all three methods
simple_result = (; method="Simple", CVA(Rs, times)...,)
symmetric_result = (; method="Symmetric", timing_symmetric(Rs, times)...,)
relative_result = (; method="Relative", timing_relative(Rs, times)...,)

# Pretty Print
df = DataFrame([simple_result, symmetric_result, relative_result])
round_array(x) = round.(x, digits=3)
df.n = round_array.(df.n)
df.V = round.(u"km/s", df.V)
simple_table(df)
```

Within numeric tolerance, the three methods yield the same result. The results of `n` are different from the table, this may be due to different coordinate systems (not implemented for now).

#### Overplot magnetopause velocity

```{julia}
fig, axs = plot_positions(R0s)
res = symmetric_result
factor = 2e-1u"km/s"
arr = res.n * res.V / factor .|> upreferred
arrows!(axs[1], [0.0], [0.0], arr[1:1], arr[2:2])
arrows!(axs[2], [0.0], [0.0], arr[1:1], arr[3:3])
arrows!(axs[3], [0.0], [0.0], arr[2:2], arr[3:3])
fig
```

### Current density, and field curvature

Utilizing Julia‚Äôs linear algebra library, `lingradest`  function can be efficiently implemented in Julia with fewer than 40 lines of code.

```julia
"""
    lingradest(B1, B2, B3, B4, R1, R2, R3, R4)

Compute spatial derivatives such as grad, div, curl and curvature using reciprocal vector technique (linear interpolation).

# Arguments
- `B1, B2, B3, B4`: 3-element vectors giving magnetic field measurements at each probe
- `R1, R2, R3, R4`: 3-element vectors giving the probe positions

# Returns
A named tuple containing:
  ‚Ä¢ Rbary: Barycenter position
  ‚Ä¢ Bbc: Magnetic field at the barycenter
  ‚Ä¢ Bmag: Magnetic field magnitude at the barycenter
  ‚Ä¢ LGBx, LGBy, LGBz: Linear gradient estimators for each component
  ‚Ä¢ LD: Linear divergence estimator
  ‚Ä¢ LCB: Linear curl estimator
  ‚Ä¢ curvature: Field‚Äêline curvature vector
  ‚Ä¢ R_c: Field‚Äêline curvature radius

# References
Based on the method of Chanteur (ISSI, 1998, Ch. 11).
- [lingradest.pro](https://github.com/spedas/bleeding_edge/blob/master/projects/mms/common/curlometer/lingradest.pro)
- [lingradest.py](https://github.com/spedas/pyspedas/blob/master/pyspedas/analysis/lingradest.py#L5)
"""
function lingradest(B1, B2, B3, B4, R1, R2, R3, R4)

    Rs = [R1, R2, R3, R4]
    Bs = [B1, B2, B3, B4]
    Bxs = getindex.(Bs, 1)
    Bys = getindex.(Bs, 2)
    Bzs = getindex.(Bs, 3)

    # Barycenter of the tetrahedron
    Rbary = (R1 .+ R2 .+ R3 .+ R4) ./ 4
    dRs = Ref(Rbary) .- Rs

    # Reciprocal vectors and Œº factors
    ks = reciprocal_vectors(R1, R2, R3, R4)
    Œºs = @. 1 + dot(ks, dRs)

    # Magnetic field at barycenter
    Bbc = sum(Œºs .* Bs)
    Bmag = norm(Bbc)

    # Linear Gradient estimators
    LGBx = sum(Bxs .* ks)
    LGBy = sum(Bys .* ks)
    LGBz = sum(Bzs .* ks)
    LGB = [LGBx LGBy LGBz]
    # Linear Divergence estimator
    div = sum(dot.(ks, Bs))

    # Linear Curl estimator
    curl = sum(cross.(ks, Bs))
    # Field-line curvature components
    curvature = (LGB' * Bbc) / (Bmag^2)
    R_c = 1 / norm(curvature)

    return (; Rbary, Bbc, Bmag,
        LGBx, LGBy, LGBz,
        div, curl, curvature, R_c)
end
```

```{julia}
B_das = tstack.(DimArray.(B_data))
times = dims(B_das[1], Ti)
B_interp_das = tinterp.(B_das, Ref(times))
pos_interp_das = tinterp.(tstack.(pos_data), Ref(times))
res = lingradest(B_interp_das..., pos_interp_das...)
```

The current density and field curvature at the average time are

```{julia}
pprint(res[Ti=Near(avgtime)])
```

```{julia}
fig, axs = tplot(res; figure=(; size=(800, 800)))
tlines!.(axs, avgtime)
fig
```

### Magnetopause thickness

The thickness can be estimated by multiplying the duration of each center crossing by the normal velocity obtained from the preceding analysis. Since we assume that velocity is constant instead of varying, the estimated thickness is simply the mean of the product of the velocity and the duration.

```{julia}
durations = t1s .- t0s
ds = symmetric_result.V .* durations
@info "thickness" ds
@info "mean thickness" mean(ds)
```


## Wave polarization

> [3] Show (see Lecture 09 p. 31) that in the plane of polarization of an elliptically polarized  wave the ellipticity $Œµ=tan(Œ≤)$, and direction of polarization $œÜ$, can be obtained from the amplitudes ${B_{x0}}', {B_{y0}}'$ and the phase difference, $œà$, between the y‚Äô and x‚Äô components from  the equations:  $sin(2Œ≤)=sin(œà) 2 {B_{x0}}' {B_{y0}}'/({B_{x0}}'^2 + {B_{y0}}'^2)$, and: $tan(2œÜ)=cos(œà) 2 {B_{x0}}' {B_{y0}}'/({B_{x0}}'^2 - {B_{y0}}'^2)$  This is the origin of the wave polarization analysis using minimum variance techniques. They are used both in exploration geophysics and in space physics, so it is good to be convinced of their origin.

We drop the primes in the plane of polarization for simplicity.

Consider the magnetic field components in the plane of polarization:

$$
\begin{aligned}
B_{x}(t) &= B_{x0} \cos(œâ t), \\
B_{y}(t) &= B_{y0} \cos(œâ t + \psi).
\end{aligned}
$$

Eliminating $œâ t$ from these equations (using $cos^2(œât)+sin^2(œât)=1$ identity) $yields the ellipse:

$$
\left(\frac{B_{x}}{B_{x0}}\right)^2 + \left(\frac{B_{y}}{B_{y0}}\right)^2 - 2 \left(\frac{B_{x}B_{y}}{B_{x0}B_{y0}}\right)\cos\psi = \sin^2\psi.
$$

**Stokes Parameters** characterize the polarization state:

$$
\begin{aligned}
S_0 &= B_{x0}^2 + B_{y0}^2, \\
S_1 &= B_{x0}^2 - B_{y0}^2, \\
S_2 &= 2 B_{x0} B_{y0}\cos\psi, \\
S_3 &= 2 B_{x0} B_{y0}\sin\psi.
\end{aligned}
$$

Given the Stokes parameters, one can solve for the spherical coordinates with the following equations:

$$
\begin{aligned}
& 2 \psi = \arctan \frac{S_2}{S_1} \\
& 2 Œ≤ = \arctan \frac{S_3}{\sqrt{S_1^2+S_2^2}}
\end{aligned}
$$

Using Stokes parameters, the ellipticity $\epsilon = \tan Œ≤$ relates to the minor-to-major axis ratio:

$$
\sin(2Œ≤) = \sin \arctan \left(\frac{S_3}{\sqrt{S_1^2+S_2^2}}\right) = \frac{S_3}{S_0} = \frac{2B_{x0}B_{y0}\sin\psi}{B_{x0}^2 + B_{y0}^2}.
$$

The angle $\psi$ of the major axis is given by the following equation:

$$
\tan(2\phi) = \frac{S_2}{S_1} = \frac{2B_{x0}B_{y0}\cos\psi}{B_{x0}^2 - B_{y0}^2}.
$$